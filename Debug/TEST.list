
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ec  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080046a4  080046a4  000146a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800472c  0800472c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  0800472c  0800472c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800472c  0800472c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000020  08004754  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004754  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b4f2  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d29  00000000  00000000  0002b57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0002d2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000678  00000000  00000000  0002db08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013d60  00000000  00000000  0002e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b7b7  00000000  00000000  00041ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c423  00000000  00000000  0004d697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ca0  00000000  00000000  000c9abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000cb75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000020 	.word	0x20000020
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800468c 	.word	0x0800468c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000024 	.word	0x20000024
 80000fc:	0800468c 	.word	0x0800468c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_UART_RxCpltCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  if(huart==&huart1)
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4b2b      	ldr	r3, [pc, #172]	; (80004a4 <HAL_UART_RxCpltCallback+0xb8>)
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d125      	bne.n	8000448 <HAL_UART_RxCpltCallback+0x5c>
  {
    for (int i = 0; i < sizeof(expectedData); i++)
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	e00e      	b.n	8000420 <HAL_UART_RxCpltCallback+0x34>
         {
           if (receivedData == expectedData[i])
 8000402:	4a29      	ldr	r2, [pc, #164]	; (80004a8 <HAL_UART_RxCpltCallback+0xbc>)
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	18d3      	adds	r3, r2, r3
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	4b28      	ldr	r3, [pc, #160]	; (80004ac <HAL_UART_RxCpltCallback+0xc0>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	429a      	cmp	r2, r3
 8000410:	d103      	bne.n	800041a <HAL_UART_RxCpltCallback+0x2e>
           {
             match = 1;
 8000412:	4b27      	ldr	r3, [pc, #156]	; (80004b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
             break;
 8000418:	e005      	b.n	8000426 <HAL_UART_RxCpltCallback+0x3a>
    for (int i = 0; i < sizeof(expectedData); i++)
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	3301      	adds	r3, #1
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	2b0e      	cmp	r3, #14
 8000424:	d9ed      	bls.n	8000402 <HAL_UART_RxCpltCallback+0x16>
           }
         }

  if(match==1){
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d106      	bne.n	800043c <HAL_UART_RxCpltCallback+0x50>
      HAL_UART_Transmit_IT(&huart1, &fine, 1);
 800042e:	4921      	ldr	r1, [pc, #132]	; (80004b4 <HAL_UART_RxCpltCallback+0xc8>)
 8000430:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <HAL_UART_RxCpltCallback+0xb8>)
 8000432:	2201      	movs	r2, #1
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fe77 	bl	8002128 <HAL_UART_Transmit_IT>
 800043a:	e005      	b.n	8000448 <HAL_UART_RxCpltCallback+0x5c>
    }
    else{
      HAL_UART_Transmit_IT(&huart1, &error, 1);
 800043c:	491e      	ldr	r1, [pc, #120]	; (80004b8 <HAL_UART_RxCpltCallback+0xcc>)
 800043e:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <HAL_UART_RxCpltCallback+0xb8>)
 8000440:	2201      	movs	r2, #1
 8000442:	0018      	movs	r0, r3
 8000444:	f001 fe70 	bl	8002128 <HAL_UART_Transmit_IT>
    }
  }
  /*-----------------------------------------*/
  if(huart==&huart2)
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <HAL_UART_RxCpltCallback+0xd0>)
 800044c:	429a      	cmp	r2, r3
 800044e:	d125      	bne.n	800049c <HAL_UART_RxCpltCallback+0xb0>
   {
     for (int i = 0; i < sizeof(expectedData); i++)
 8000450:	2300      	movs	r3, #0
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	e00e      	b.n	8000474 <HAL_UART_RxCpltCallback+0x88>
          {
            if (receivedData == expectedData[i])
 8000456:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <HAL_UART_RxCpltCallback+0xbc>)
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	18d3      	adds	r3, r2, r3
 800045c:	781a      	ldrb	r2, [r3, #0]
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <HAL_UART_RxCpltCallback+0xc0>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	429a      	cmp	r2, r3
 8000464:	d103      	bne.n	800046e <HAL_UART_RxCpltCallback+0x82>
            {
              match = 1;
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000468:	2201      	movs	r2, #1
 800046a:	701a      	strb	r2, [r3, #0]
              break;
 800046c:	e005      	b.n	800047a <HAL_UART_RxCpltCallback+0x8e>
     for (int i = 0; i < sizeof(expectedData); i++)
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	3301      	adds	r3, #1
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	2b0e      	cmp	r3, #14
 8000478:	d9ed      	bls.n	8000456 <HAL_UART_RxCpltCallback+0x6a>
            }
          }

   if(match==1){
 800047a:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <HAL_UART_RxCpltCallback+0xc4>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d106      	bne.n	8000490 <HAL_UART_RxCpltCallback+0xa4>
       HAL_UART_Transmit_IT(&huart2, &fine, 1);
 8000482:	490c      	ldr	r1, [pc, #48]	; (80004b4 <HAL_UART_RxCpltCallback+0xc8>)
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <HAL_UART_RxCpltCallback+0xd0>)
 8000486:	2201      	movs	r2, #1
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fe4d 	bl	8002128 <HAL_UART_Transmit_IT>
     }
     else{
       HAL_UART_Transmit_IT(&huart2, &error, 1);
     }
   }
}
 800048e:	e005      	b.n	800049c <HAL_UART_RxCpltCallback+0xb0>
       HAL_UART_Transmit_IT(&huart2, &error, 1);
 8000490:	4909      	ldr	r1, [pc, #36]	; (80004b8 <HAL_UART_RxCpltCallback+0xcc>)
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_UART_RxCpltCallback+0xd0>)
 8000494:	2201      	movs	r2, #1
 8000496:	0018      	movs	r0, r3
 8000498:	f001 fe46 	bl	8002128 <HAL_UART_Transmit_IT>
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b004      	add	sp, #16
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	2000003c 	.word	0x2000003c
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000164 	.word	0x20000164
 80004b0:	20000165 	.word	0x20000165
 80004b4:	2000000f 	.word	0x2000000f
 80004b8:	20000010 	.word	0x20000010
 80004bc:	200000d0 	.word	0x200000d0

080004c0 <HAL_UART_TxCpltCallback>:

//-----------------------------------------------------

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	if(huart==&huart1){

	}

}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b002      	add	sp, #8
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb12 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f8a0 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f968 	bl	80007b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f8e4 	bl	80006ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f930 	bl	8000748 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MODE_1==1){
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4a45      	ldr	r2, [pc, #276]	; (8000604 <main+0x134>)
 80004ee:	0019      	movs	r1, r3
 80004f0:	0010      	movs	r0, r2
 80004f2:	f000 ff5d 	bl	80013b0 <HAL_GPIO_ReadPin>
 80004f6:	0003      	movs	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d10d      	bne.n	8000518 <main+0x48>
	                SET_LED_MODE1;
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	4840      	ldr	r0, [pc, #256]	; (8000604 <main+0x134>)
 8000502:	2200      	movs	r2, #0
 8000504:	0019      	movs	r1, r3
 8000506:	f000 ff70 	bl	80013ea <HAL_GPIO_WritePin>
	                SET_LED_LEFT;
 800050a:	4b3e      	ldr	r3, [pc, #248]	; (8000604 <main+0x134>)
 800050c:	2200      	movs	r2, #0
 800050e:	2101      	movs	r1, #1
 8000510:	0018      	movs	r0, r3
 8000512:	f000 ff6a 	bl	80013ea <HAL_GPIO_WritePin>
 8000516:	e00c      	b.n	8000532 <main+0x62>
	              }else{
	                RESET_LED_MODE1;
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	4839      	ldr	r0, [pc, #228]	; (8000604 <main+0x134>)
 800051e:	2201      	movs	r2, #1
 8000520:	0019      	movs	r1, r3
 8000522:	f000 ff62 	bl	80013ea <HAL_GPIO_WritePin>
	                RESET_LED_LEFT;
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <main+0x134>)
 8000528:	2201      	movs	r2, #1
 800052a:	2101      	movs	r1, #1
 800052c:	0018      	movs	r0, r3
 800052e:	f000 ff5c 	bl	80013ea <HAL_GPIO_WritePin>
	              }
	              if(MODE_2==1){
 8000532:	4b34      	ldr	r3, [pc, #208]	; (8000604 <main+0x134>)
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	0018      	movs	r0, r3
 8000538:	f000 ff3a 	bl	80013b0 <HAL_GPIO_ReadPin>
 800053c:	0003      	movs	r3, r0
 800053e:	2b01      	cmp	r3, #1
 8000540:	d10c      	bne.n	800055c <main+0x8c>
	                SET_LED_MODE2;
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <main+0x134>)
 8000544:	2200      	movs	r2, #0
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	0018      	movs	r0, r3
 800054a:	f000 ff4e 	bl	80013ea <HAL_GPIO_WritePin>
	                SET_LED_RIGHT;
 800054e:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <main+0x134>)
 8000550:	2200      	movs	r2, #0
 8000552:	2102      	movs	r1, #2
 8000554:	0018      	movs	r0, r3
 8000556:	f000 ff48 	bl	80013ea <HAL_GPIO_WritePin>
 800055a:	e00b      	b.n	8000574 <main+0xa4>
	              }else{
	                RESET_LED_MODE2;
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <main+0x134>)
 800055e:	2201      	movs	r2, #1
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	0018      	movs	r0, r3
 8000564:	f000 ff41 	bl	80013ea <HAL_GPIO_WritePin>
	                RESET_LED_RIGHT;
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <main+0x134>)
 800056a:	2201      	movs	r2, #1
 800056c:	2102      	movs	r1, #2
 800056e:	0018      	movs	r0, r3
 8000570:	f000 ff3b 	bl	80013ea <HAL_GPIO_WritePin>
	              }
	              if((HALL_1==GPIO_PIN_RESET)||(HALL_2==GPIO_PIN_RESET)||(HALL_3==GPIO_PIN_RESET)){
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <main+0x134>)
 8000576:	2120      	movs	r1, #32
 8000578:	0018      	movs	r0, r3
 800057a:	f000 ff19 	bl	80013b0 <HAL_GPIO_ReadPin>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d00d      	beq.n	800059e <main+0xce>
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <main+0x134>)
 8000584:	2110      	movs	r1, #16
 8000586:	0018      	movs	r0, r3
 8000588:	f000 ff12 	bl	80013b0 <HAL_GPIO_ReadPin>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d006      	beq.n	800059e <main+0xce>
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <main+0x134>)
 8000592:	2108      	movs	r1, #8
 8000594:	0018      	movs	r0, r3
 8000596:	f000 ff0b 	bl	80013b0 <HAL_GPIO_ReadPin>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d10d      	bne.n	80005ba <main+0xea>
	               RESET_LED_MODE1;
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4818      	ldr	r0, [pc, #96]	; (8000604 <main+0x134>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	0019      	movs	r1, r3
 80005a8:	f000 ff1f 	bl	80013ea <HAL_GPIO_WritePin>
	                 RESET_LED_MODE2;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <main+0x134>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	2140      	movs	r1, #64	; 0x40
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 ff19 	bl	80013ea <HAL_GPIO_WritePin>
 80005b8:	e00c      	b.n	80005d4 <main+0x104>

	              }else{
	                SET_LED_MODE1;
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	4811      	ldr	r0, [pc, #68]	; (8000604 <main+0x134>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	0019      	movs	r1, r3
 80005c4:	f000 ff11 	bl	80013ea <HAL_GPIO_WritePin>
	                SET_LED_MODE2;
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <main+0x134>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	2140      	movs	r1, #64	; 0x40
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 ff0b 	bl	80013ea <HAL_GPIO_WritePin>
	              }



	              //UART one by one__________________________________________________
	            HAL_UART_Receive_IT(&huart1, &receivedData, 1);
 80005d4:	490c      	ldr	r1, [pc, #48]	; (8000608 <main+0x138>)
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <main+0x13c>)
 80005d8:	2201      	movs	r2, #1
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 fe4c 	bl	8002278 <HAL_UART_Receive_IT>
	            HAL_UART_Receive_IT(&huart2, &receivedData, 1);
 80005e0:	4909      	ldr	r1, [pc, #36]	; (8000608 <main+0x138>)
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <main+0x140>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 fe46 	bl	8002278 <HAL_UART_Receive_IT>

	            //UART by UART__________________________________________________
	            if(data_ready){
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <main+0x144>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d100      	bne.n	80005f6 <main+0x126>
 80005f4:	e778      	b.n	80004e8 <main+0x18>
	            	HAL_UART_Transmit_DMA(&huart1, expectedData, 1);
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <main+0x148>)
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <main+0x13c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fe93 	bl	8002328 <HAL_UART_Transmit_DMA>
	  if(MODE_1==1){
 8000602:	e771      	b.n	80004e8 <main+0x18>
 8000604:	50000400 	.word	0x50000400
 8000608:	20000164 	.word	0x20000164
 800060c:	2000003c 	.word	0x2000003c
 8000610:	200000d0 	.word	0x200000d0
 8000614:	20000166 	.word	0x20000166
 8000618:	20000000 	.word	0x20000000

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b093      	sub	sp, #76	; 0x4c
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	2414      	movs	r4, #20
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2334      	movs	r3, #52	; 0x34
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f004 f801 	bl	8004634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	0018      	movs	r0, r3
 8000636:	2310      	movs	r3, #16
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f003 fffa 	bl	8004634 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	0018      	movs	r0, r3
 8000646:	f000 feed 	bl	8001424 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2202      	movs	r2, #2
 800064e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	0052      	lsls	r2, r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	2240      	movs	r2, #64	; 0x40
 8000662:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	193b      	adds	r3, r7, r4
 800066c:	0018      	movs	r0, r3
 800066e:	f000 ff25 	bl	80014bc <HAL_RCC_OscConfig>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000676:	f000 f921 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2207      	movs	r2, #7
 800067e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2100      	movs	r1, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fa20 	bl	8001adc <HAL_RCC_ClockConfig>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006a0:	f000 f90c 	bl	80008bc <Error_Handler>
  }
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b013      	add	sp, #76	; 0x4c
 80006aa:	bd90      	pop	{r4, r7, pc}

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006b2:	4a24      	ldr	r2, [pc, #144]	; (8000744 <MX_USART1_UART_Init+0x98>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006b8:	2296      	movs	r2, #150	; 0x96
 80006ba:	0192      	lsls	r2, r2, #6
 80006bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 fcc0 	bl	800207c <HAL_UART_Init>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000700:	f000 f8dc 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART1_UART_Init+0x94>)
 8000706:	2100      	movs	r1, #0
 8000708:	0018      	movs	r0, r3
 800070a:	f003 feb3 	bl	8004474 <HAL_UARTEx_SetTxFifoThreshold>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000712:	f000 f8d3 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_USART1_UART_Init+0x94>)
 8000718:	2100      	movs	r1, #0
 800071a:	0018      	movs	r0, r3
 800071c:	f003 feea 	bl	80044f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000724:	f000 f8ca 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MX_USART1_UART_Init+0x94>)
 800072a:	0018      	movs	r0, r3
 800072c:	f003 fe68 	bl	8004400 <HAL_UARTEx_DisableFifoMode>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000734:	f000 f8c2 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	2000003c 	.word	0x2000003c
 8000744:	40013800 	.word	0x40013800

08000748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <MX_USART2_UART_Init+0x64>)
 8000750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 8000754:	2296      	movs	r2, #150	; 0x96
 8000756:	0192      	lsls	r2, r2, #6
 8000758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 800078c:	2200      	movs	r2, #0
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x60>)
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fc72 	bl	800207c <HAL_UART_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f88e 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	200000d0 	.word	0x200000d0
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	240c      	movs	r4, #12
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	0018      	movs	r0, r3
 80007bc:	2314      	movs	r3, #20
 80007be:	001a      	movs	r2, r3
 80007c0:	2100      	movs	r1, #0
 80007c2:	f003 ff37 	bl	8004634 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b3b      	ldr	r3, [pc, #236]	; (80008b4 <MX_GPIO_Init+0x104>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ca:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <MX_GPIO_Init+0x104>)
 80007cc:	2102      	movs	r1, #2
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
 80007d2:	4b38      	ldr	r3, [pc, #224]	; (80008b4 <MX_GPIO_Init+0x104>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d6:	2202      	movs	r2, #2
 80007d8:	4013      	ands	r3, r2
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b35      	ldr	r3, [pc, #212]	; (80008b4 <MX_GPIO_Init+0x104>)
 80007e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <MX_GPIO_Init+0x104>)
 80007e4:	2104      	movs	r1, #4
 80007e6:	430a      	orrs	r2, r1
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ea:	4b32      	ldr	r3, [pc, #200]	; (80008b4 <MX_GPIO_Init+0x104>)
 80007ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ee:	2204      	movs	r2, #4
 80007f0:	4013      	ands	r3, r2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <MX_GPIO_Init+0x104>)
 80007f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <MX_GPIO_Init+0x104>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	430a      	orrs	r2, r1
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
 8000802:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <MX_GPIO_Init+0x104>)
 8000804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000806:	2201      	movs	r2, #1
 8000808:	4013      	ands	r3, r2
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L_LED_Pin|R_LED_Pin|MODE2_LED_Pin|MODE1_LED_Pin, GPIO_PIN_RESET);
 800080e:	2344      	movs	r3, #68	; 0x44
 8000810:	33ff      	adds	r3, #255	; 0xff
 8000812:	4829      	ldr	r0, [pc, #164]	; (80008b8 <MX_GPIO_Init+0x108>)
 8000814:	2200      	movs	r2, #0
 8000816:	0019      	movs	r1, r3
 8000818:	f000 fde7 	bl	80013ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODE1_Pin MODE2_Pin */
  GPIO_InitStruct.Pin = MODE1_Pin|MODE2_Pin;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	22a0      	movs	r2, #160	; 0xa0
 8000820:	0092      	lsls	r2, r2, #2
 8000822:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2201      	movs	r2, #1
 800082e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	193b      	adds	r3, r7, r4
 8000832:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <MX_GPIO_Init+0x108>)
 8000834:	0019      	movs	r1, r3
 8000836:	0010      	movs	r0, r2
 8000838:	f000 fc56 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_LED_Pin MODE2_LED_Pin MODE1_LED_Pin */
  GPIO_InitStruct.Pin = L_LED_Pin|MODE2_LED_Pin|MODE1_LED_Pin;
 800083c:	0021      	movs	r1, r4
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2242      	movs	r2, #66	; 0x42
 8000842:	32ff      	adds	r2, #255	; 0xff
 8000844:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	000c      	movs	r4, r1
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2201      	movs	r2, #1
 800084c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	193b      	adds	r3, r7, r4
 800085c:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <MX_GPIO_Init+0x108>)
 800085e:	0019      	movs	r1, r3
 8000860:	0010      	movs	r0, r2
 8000862:	f000 fc41 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_LED_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2202      	movs	r2, #2
 800086a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	2201      	movs	r2, #1
 8000870:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2201      	movs	r2, #1
 8000876:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(R_LED_GPIO_Port, &GPIO_InitStruct);
 800087e:	193b      	adds	r3, r7, r4
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <MX_GPIO_Init+0x108>)
 8000882:	0019      	movs	r1, r3
 8000884:	0010      	movs	r0, r2
 8000886:	f000 fc2f 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_3_Pin HALL_2_Pin HALL_1_Pin */
  GPIO_InitStruct.Pin = HALL_3_Pin|HALL_2_Pin|HALL_1_Pin;
 800088a:	0021      	movs	r1, r4
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2238      	movs	r2, #56	; 0x38
 8000890:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <MX_GPIO_Init+0x108>)
 80008a2:	0019      	movs	r1, r3
 80008a4:	0010      	movs	r0, r2
 80008a6:	f000 fc1f 	bl	80010e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b009      	add	sp, #36	; 0x24
 80008b0:	bd90      	pop	{r4, r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	40021000 	.word	0x40021000
 80008b8:	50000400 	.word	0x50000400

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x44>)
 80008d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_MspInit+0x44>)
 80008d4:	2101      	movs	r1, #1
 80008d6:	430a      	orrs	r2, r1
 80008d8:	641a      	str	r2, [r3, #64]	; 0x40
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x44>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	2201      	movs	r2, #1
 80008e0:	4013      	ands	r3, r2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x44>)
 80008e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_MspInit+0x44>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0549      	lsls	r1, r1, #21
 80008f0:	430a      	orrs	r2, r1
 80008f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_MspInit+0x44>)
 80008f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	055b      	lsls	r3, r3, #21
 80008fc:	4013      	ands	r3, r2
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b002      	add	sp, #8
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b093      	sub	sp, #76	; 0x4c
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	2334      	movs	r3, #52	; 0x34
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	0018      	movs	r0, r3
 800091e:	2314      	movs	r3, #20
 8000920:	001a      	movs	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	f003 fe86 	bl	8004634 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	241c      	movs	r4, #28
 800092a:	193b      	adds	r3, r7, r4
 800092c:	0018      	movs	r0, r3
 800092e:	2318      	movs	r3, #24
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f003 fe7e 	bl	8004634 <memset>
  if(huart->Instance==USART1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a42      	ldr	r2, [pc, #264]	; (8000a48 <HAL_UART_MspInit+0x138>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d148      	bne.n	80009d4 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000948:	193b      	adds	r3, r7, r4
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fa6d 	bl	8001e30 <HAL_RCCEx_PeriphCLKConfig>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800095a:	f7ff ffaf 	bl	80008bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800095e:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 8000960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000962:	4b3a      	ldr	r3, [pc, #232]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	01c9      	lsls	r1, r1, #7
 8000968:	430a      	orrs	r2, r1
 800096a:	641a      	str	r2, [r3, #64]	; 0x40
 800096c:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 800096e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	01db      	lsls	r3, r3, #7
 8000974:	4013      	ands	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
 8000978:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 800097c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 8000980:	2101      	movs	r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
 8000986:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 8000988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098a:	2201      	movs	r2, #1
 800098c:	4013      	ands	r3, r2
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000992:	2134      	movs	r1, #52	; 0x34
 8000994:	187b      	adds	r3, r7, r1
 8000996:	22c0      	movs	r2, #192	; 0xc0
 8000998:	00d2      	lsls	r2, r2, #3
 800099a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2202      	movs	r2, #2
 80009a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2201      	movs	r2, #1
 80009b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	187a      	adds	r2, r7, r1
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 fb93 	bl	80010e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	201b      	movs	r0, #27
 80009c8:	f000 f9ca 	bl	8000d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009cc:	201b      	movs	r0, #27
 80009ce:	f000 f9dc 	bl	8000d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d2:	e035      	b.n	8000a40 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <HAL_UART_MspInit+0x140>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d130      	bne.n	8000a40 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 80009e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	0289      	lsls	r1, r1, #10
 80009e8:	430a      	orrs	r2, r1
 80009ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 80009ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 80009fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_UART_MspInit+0x13c>)
 8000a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a12:	2134      	movs	r1, #52	; 0x34
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	187a      	adds	r2, r7, r1
 8000a34:	23a0      	movs	r3, #160	; 0xa0
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 fb54 	bl	80010e8 <HAL_GPIO_Init>
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b013      	add	sp, #76	; 0x4c
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40004400 	.word	0x40004400

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f8aa 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <USART1_IRQHandler+0x14>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 fcde 	bl	800244c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	2000003c 	.word	0x2000003c

08000a9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aaa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aac:	f7ff fff6 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	; (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ad6:	f003 fdb5 	bl	8004644 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ada:	f7ff fcf9 	bl	80004d0 <main>

08000ade <LoopForever>:

LoopForever:
  b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   r0, =_estack
 8000ae0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000aec:	08004734 	.word	0x08004734
  ldr r2, =_sbss
 8000af0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000af4:	2000016c 	.word	0x2000016c

08000af8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_IRQHandler>
	...

08000afc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_Init+0x3c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_Init+0x3c>)
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	0049      	lsls	r1, r1, #1
 8000b12:	430a      	orrs	r2, r1
 8000b14:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b16:	2003      	movs	r0, #3
 8000b18:	f000 f810 	bl	8000b3c <HAL_InitTick>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e001      	b.n	8000b2c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fece 	bl	80008c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b44:	230f      	movs	r3, #15
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_InitTick+0x88>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d02b      	beq.n	8000bac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_InitTick+0x8c>)
 8000b56:	681c      	ldr	r4, [r3, #0]
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_InitTick+0x88>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	23fa      	movs	r3, #250	; 0xfa
 8000b60:	0098      	lsls	r0, r3, #2
 8000b62:	f7ff facd 	bl	8000100 <__udivsi3>
 8000b66:	0003      	movs	r3, r0
 8000b68:	0019      	movs	r1, r3
 8000b6a:	0020      	movs	r0, r4
 8000b6c:	f7ff fac8 	bl	8000100 <__udivsi3>
 8000b70:	0003      	movs	r3, r0
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 f919 	bl	8000daa <HAL_SYSTICK_Config>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d112      	bne.n	8000ba2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d80a      	bhi.n	8000b98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	2301      	movs	r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 f8e8 	bl	8000d60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_InitTick+0x90>)
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e00d      	b.n	8000bb4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e008      	b.n	8000bb4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	e003      	b.n	8000bb4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bac:	230f      	movs	r3, #15
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
}
 8000bba:	0018      	movs	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b005      	add	sp, #20
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	2000001c 	.word	0x2000001c
 8000bc8:	20000014 	.word	0x20000014
 8000bcc:	20000018 	.word	0x20000018

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x1c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	001a      	movs	r2, r3
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	18d2      	adds	r2, r2, r3
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_IncTick+0x20>)
 8000be2:	601a      	str	r2, [r3, #0]
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	2000001c 	.word	0x2000001c
 8000bf0:	20000168 	.word	0x20000168

08000bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <HAL_GetTick+0x10>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	20000168 	.word	0x20000168

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	0002      	movs	r2, r0
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1a:	d809      	bhi.n	8000c30 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	231f      	movs	r3, #31
 8000c24:	401a      	ands	r2, r3
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_EnableIRQ+0x30>)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	4091      	lsls	r1, r2
 8000c2c:	000a      	movs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	0002      	movs	r2, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c50:	d828      	bhi.n	8000ca4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c52:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <__NVIC_SetPriority+0xd4>)
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	33c0      	adds	r3, #192	; 0xc0
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	589b      	ldr	r3, [r3, r2]
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	0011      	movs	r1, r2
 8000c68:	2203      	movs	r2, #3
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	21ff      	movs	r1, #255	; 0xff
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	401a      	ands	r2, r3
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	2303      	movs	r3, #3
 8000c8a:	4003      	ands	r3, r0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c90:	481f      	ldr	r0, [pc, #124]	; (8000d10 <__NVIC_SetPriority+0xd4>)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	33c0      	adds	r3, #192	; 0xc0
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ca2:	e031      	b.n	8000d08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <__NVIC_SetPriority+0xd8>)
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	0019      	movs	r1, r3
 8000cac:	230f      	movs	r3, #15
 8000cae:	400b      	ands	r3, r1
 8000cb0:	3b08      	subs	r3, #8
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3306      	adds	r3, #6
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	3304      	adds	r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1dfa      	adds	r2, r7, #7
 8000cc0:	7812      	ldrb	r2, [r2, #0]
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	400a      	ands	r2, r1
 8000cc8:	00d2      	lsls	r2, r2, #3
 8000cca:	21ff      	movs	r1, #255	; 0xff
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	000a      	movs	r2, r1
 8000cd0:	43d2      	mvns	r2, r2
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	22ff      	movs	r2, #255	; 0xff
 8000cdc:	401a      	ands	r2, r3
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	4003      	ands	r3, r0
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <__NVIC_SetPriority+0xd8>)
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	001c      	movs	r4, r3
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	4023      	ands	r3, r4
 8000cf8:	3b08      	subs	r3, #8
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	3306      	adds	r3, #6
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	18c3      	adds	r3, r0, r3
 8000d04:	3304      	adds	r3, #4
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b003      	add	sp, #12
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	045b      	lsls	r3, r3, #17
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d301      	bcc.n	8000d30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e010      	b.n	8000d52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <SysTick_Config+0x44>)
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	3a01      	subs	r2, #1
 8000d36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d38:	2301      	movs	r3, #1
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff ff7c 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x44>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x44>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	1c02      	adds	r2, r0, #0
 8000d70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ff5d 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	0002      	movs	r2, r0
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff ff33 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff ffaf 	bl	8000d18 <SysTick_Config>
 8000dba:	0003      	movs	r3, r0
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd2:	2317      	movs	r3, #23
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2224      	movs	r2, #36	; 0x24
 8000dde:	5c9b      	ldrb	r3, [r3, r2]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <HAL_DMA_Start_IT+0x24>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e06f      	b.n	8000ec8 <HAL_DMA_Start_IT+0x104>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2224      	movs	r2, #36	; 0x24
 8000dec:	2101      	movs	r1, #1
 8000dee:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2225      	movs	r2, #37	; 0x25
 8000df4:	5c9b      	ldrb	r3, [r3, r2]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d157      	bne.n	8000eac <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2225      	movs	r2, #37	; 0x25
 8000e00:	2102      	movs	r1, #2
 8000e02:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2200      	movs	r2, #0
 8000e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2101      	movs	r1, #1
 8000e16:	438a      	bics	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	f000 f921 	bl	8001068 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d008      	beq.n	8000e40 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	210e      	movs	r1, #14
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e00f      	b.n	8000e60 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	438a      	bics	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	210a      	movs	r1, #10
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	025b      	lsls	r3, r3, #9
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d008      	beq.n	8000e80 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	0049      	lsls	r1, r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d008      	beq.n	8000e9a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	0049      	lsls	r1, r1, #1
 8000e96:	430a      	orrs	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e00a      	b.n	8000ec2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2224      	movs	r2, #36	; 0x24
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000eba:	2317      	movs	r3, #23
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000ec2:	2317      	movs	r3, #23
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	781b      	ldrb	r3, [r3, #0]
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b006      	add	sp, #24
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e050      	b.n	8000f84 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2225      	movs	r2, #37	; 0x25
 8000ee6:	5c9b      	ldrb	r3, [r3, r2]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d008      	beq.n	8000f00 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2224      	movs	r2, #36	; 0x24
 8000ef8:	2100      	movs	r1, #0
 8000efa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e041      	b.n	8000f84 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	210e      	movs	r1, #14
 8000f0c:	438a      	bics	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	491c      	ldr	r1, [pc, #112]	; (8000f8c <HAL_DMA_Abort+0xbc>)
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	438a      	bics	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_DMA_Abort+0xc0>)
 8000f32:	6859      	ldr	r1, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	221c      	movs	r2, #28
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_DMA_Abort+0xc0>)
 8000f42:	430a      	orrs	r2, r1
 8000f44:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00c      	beq.n	8000f72 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f62:	490a      	ldr	r1, [pc, #40]	; (8000f8c <HAL_DMA_Abort+0xbc>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000f70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2225      	movs	r2, #37	; 0x25
 8000f76:	2101      	movs	r1, #1
 8000f78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2224      	movs	r2, #36	; 0x24
 8000f7e:	2100      	movs	r1, #0
 8000f80:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	fffffeff 	.word	0xfffffeff
 8000f90:	40020000 	.word	0x40020000

08000f94 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9c:	210f      	movs	r1, #15
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2225      	movs	r2, #37	; 0x25
 8000fa8:	5c9b      	ldrb	r3, [r3, r2]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d006      	beq.n	8000fbe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	e049      	b.n	8001052 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	210e      	movs	r1, #14
 8000fca:	438a      	bics	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	438a      	bics	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe8:	491d      	ldr	r1, [pc, #116]	; (8001060 <HAL_DMA_Abort_IT+0xcc>)
 8000fea:	400a      	ands	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_DMA_Abort_IT+0xd0>)
 8000ff0:	6859      	ldr	r1, [r3, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	221c      	movs	r2, #28
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_DMA_Abort_IT+0xd0>)
 8001000:	430a      	orrs	r2, r1
 8001002:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800100c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00c      	beq.n	8001030 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001020:	490f      	ldr	r1, [pc, #60]	; (8001060 <HAL_DMA_Abort_IT+0xcc>)
 8001022:	400a      	ands	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800102e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2225      	movs	r2, #37	; 0x25
 8001034:	2101      	movs	r1, #1
 8001036:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2224      	movs	r2, #36	; 0x24
 800103c:	2100      	movs	r1, #0
 800103e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	0010      	movs	r0, r2
 8001050:	4798      	blx	r3
    }
  }
  return status;
 8001052:	230f      	movs	r3, #15
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	781b      	ldrb	r3, [r3, #0]
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	b004      	add	sp, #16
 800105e:	bd80      	pop	{r7, pc}
 8001060:	fffffeff 	.word	0xfffffeff
 8001064:	40020000 	.word	0x40020000

08001068 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800107e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001090:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <DMA_SetConfig+0x7c>)
 8001094:	6859      	ldr	r1, [r3, #4]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	221c      	movs	r2, #28
 800109c:	4013      	ands	r3, r2
 800109e:	2201      	movs	r2, #1
 80010a0:	409a      	lsls	r2, r3
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <DMA_SetConfig+0x7c>)
 80010a4:	430a      	orrs	r2, r1
 80010a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2b10      	cmp	r3, #16
 80010b6:	d108      	bne.n	80010ca <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010c8:	e007      	b.n	80010da <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	60da      	str	r2, [r3, #12]
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	40020000 	.word	0x40020000

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f6:	e147      	b.n	8001388 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2101      	movs	r1, #1
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4091      	lsls	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d100      	bne.n	8001110 <HAL_GPIO_Init+0x28>
 800110e:	e138      	b.n	8001382 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2203      	movs	r2, #3
 8001116:	4013      	ands	r3, r2
 8001118:	2b01      	cmp	r3, #1
 800111a:	d005      	beq.n	8001128 <HAL_GPIO_Init+0x40>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	4013      	ands	r3, r2
 8001124:	2b02      	cmp	r3, #2
 8001126:	d130      	bne.n	800118a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	409a      	lsls	r2, r3
 8001136:	0013      	movs	r3, r2
 8001138:	43da      	mvns	r2, r3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	409a      	lsls	r2, r3
 800114a:	0013      	movs	r3, r2
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800115e:	2201      	movs	r2, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	43da      	mvns	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	2201      	movs	r2, #1
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2203      	movs	r2, #3
 8001190:	4013      	ands	r3, r2
 8001192:	2b03      	cmp	r3, #3
 8001194:	d017      	beq.n	80011c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2203      	movs	r2, #3
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d123      	bne.n	800121a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	58d3      	ldr	r3, [r2, r3]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	2207      	movs	r2, #7
 80011e4:	4013      	ands	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	43da      	mvns	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	691a      	ldr	r2, [r3, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2107      	movs	r1, #7
 80011fe:	400b      	ands	r3, r1
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	6939      	ldr	r1, [r7, #16]
 8001218:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2203      	movs	r2, #3
 8001238:	401a      	ands	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	23c0      	movs	r3, #192	; 0xc0
 8001254:	029b      	lsls	r3, r3, #10
 8001256:	4013      	ands	r3, r2
 8001258:	d100      	bne.n	800125c <HAL_GPIO_Init+0x174>
 800125a:	e092      	b.n	8001382 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800125c:	4a50      	ldr	r2, [pc, #320]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3318      	adds	r3, #24
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	589b      	ldr	r3, [r3, r2]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2203      	movs	r2, #3
 800126e:	4013      	ands	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	220f      	movs	r2, #15
 8001274:	409a      	lsls	r2, r3
 8001276:	0013      	movs	r3, r2
 8001278:	43da      	mvns	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	23a0      	movs	r3, #160	; 0xa0
 8001284:	05db      	lsls	r3, r3, #23
 8001286:	429a      	cmp	r2, r3
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0x1ca>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <HAL_GPIO_Init+0x2bc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00d      	beq.n	80012ae <HAL_GPIO_Init+0x1c6>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a44      	ldr	r2, [pc, #272]	; (80013a8 <HAL_GPIO_Init+0x2c0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x1c2>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a43      	ldr	r2, [pc, #268]	; (80013ac <HAL_GPIO_Init+0x2c4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_GPIO_Init+0x1be>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x1cc>
 80012a6:	2305      	movs	r3, #5
 80012a8:	e004      	b.n	80012b4 <HAL_GPIO_Init+0x1cc>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_Init+0x1cc>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_GPIO_Init+0x1cc>
 80012b2:	2300      	movs	r3, #0
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	2103      	movs	r1, #3
 80012b8:	400a      	ands	r2, r1
 80012ba:	00d2      	lsls	r2, r2, #3
 80012bc:	4093      	lsls	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80012c4:	4936      	ldr	r1, [pc, #216]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3318      	adds	r3, #24
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d2:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	035b      	lsls	r3, r3, #13
 80012ea:	4013      	ands	r3, r2
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43da      	mvns	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	039b      	lsls	r3, r3, #14
 8001314:	4013      	ands	r3, r2
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 8001328:	2384      	movs	r3, #132	; 0x84
 800132a:	58d3      	ldr	r3, [r2, r3]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43da      	mvns	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	029b      	lsls	r3, r3, #10
 8001340:	4013      	ands	r3, r2
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800134c:	4914      	ldr	r1, [pc, #80]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 800134e:	2284      	movs	r2, #132	; 0x84
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001354:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	58d3      	ldr	r3, [r2, r3]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	4013      	ands	r3, r2
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800137a:	4909      	ldr	r1, [pc, #36]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	40da      	lsrs	r2, r3
 8001390:	1e13      	subs	r3, r2, #0
 8001392:	d000      	beq.n	8001396 <HAL_GPIO_Init+0x2ae>
 8001394:	e6b0      	b.n	80010f8 <HAL_GPIO_Init+0x10>
  }
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b006      	add	sp, #24
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021800 	.word	0x40021800
 80013a4:	50000400 	.word	0x50000400
 80013a8:	50000800 	.word	0x50000800
 80013ac:	50000c00 	.word	0x50000c00

080013b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	000a      	movs	r2, r1
 80013ba:	1cbb      	adds	r3, r7, #2
 80013bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	1cba      	adds	r2, r7, #2
 80013c4:	8812      	ldrh	r2, [r2, #0]
 80013c6:	4013      	ands	r3, r2
 80013c8:	d004      	beq.n	80013d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80013ca:	230f      	movs	r3, #15
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	e003      	b.n	80013dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013d4:	230f      	movs	r3, #15
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80013dc:	230f      	movs	r3, #15
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	781b      	ldrb	r3, [r3, #0]
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	0008      	movs	r0, r1
 80013f4:	0011      	movs	r1, r2
 80013f6:	1cbb      	adds	r3, r7, #2
 80013f8:	1c02      	adds	r2, r0, #0
 80013fa:	801a      	strh	r2, [r3, #0]
 80013fc:	1c7b      	adds	r3, r7, #1
 80013fe:	1c0a      	adds	r2, r1, #0
 8001400:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001402:	1c7b      	adds	r3, r7, #1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140a:	1cbb      	adds	r3, r7, #2
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001412:	e003      	b.n	800141c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001414:	1cbb      	adds	r3, r7, #2
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a19      	ldr	r2, [pc, #100]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001432:	4013      	ands	r3, r2
 8001434:	0019      	movs	r1, r3
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	429a      	cmp	r2, r3
 8001446:	d11f      	bne.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	0013      	movs	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	189b      	adds	r3, r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4912      	ldr	r1, [pc, #72]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001456:	0018      	movs	r0, r3
 8001458:	f7fe fe52 	bl	8000100 <__udivsi3>
 800145c:	0003      	movs	r3, r0
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001462:	e008      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3b01      	subs	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	e001      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e009      	b.n	800148a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	401a      	ands	r2, r3
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	429a      	cmp	r2, r3
 8001486:	d0ed      	beq.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b004      	add	sp, #16
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	40007000 	.word	0x40007000
 8001498:	fffff9ff 	.word	0xfffff9ff
 800149c:	20000014 	.word	0x20000014
 80014a0:	000f4240 	.word	0x000f4240

080014a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	23e0      	movs	r3, #224	; 0xe0
 80014ae:	01db      	lsls	r3, r3, #7
 80014b0:	4013      	ands	r3, r2
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e2f3      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2201      	movs	r2, #1
 80014d4:	4013      	ands	r3, r2
 80014d6:	d100      	bne.n	80014da <HAL_RCC_OscConfig+0x1e>
 80014d8:	e07c      	b.n	80015d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014da:	4bc3      	ldr	r3, [pc, #780]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2238      	movs	r2, #56	; 0x38
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e4:	4bc0      	ldr	r3, [pc, #768]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2203      	movs	r2, #3
 80014ea:	4013      	ands	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b10      	cmp	r3, #16
 80014f2:	d102      	bne.n	80014fa <HAL_RCC_OscConfig+0x3e>
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d002      	beq.n	8001500 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d10b      	bne.n	8001518 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	4bb9      	ldr	r3, [pc, #740]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	029b      	lsls	r3, r3, #10
 8001508:	4013      	ands	r3, r2
 800150a:	d062      	beq.n	80015d2 <HAL_RCC_OscConfig+0x116>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d15e      	bne.n	80015d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e2ce      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	025b      	lsls	r3, r3, #9
 8001520:	429a      	cmp	r2, r3
 8001522:	d107      	bne.n	8001534 <HAL_RCC_OscConfig+0x78>
 8001524:	4bb0      	ldr	r3, [pc, #704]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4baf      	ldr	r3, [pc, #700]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 800152a:	2180      	movs	r1, #128	; 0x80
 800152c:	0249      	lsls	r1, r1, #9
 800152e:	430a      	orrs	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e020      	b.n	8001576 <HAL_RCC_OscConfig+0xba>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	23a0      	movs	r3, #160	; 0xa0
 800153a:	02db      	lsls	r3, r3, #11
 800153c:	429a      	cmp	r2, r3
 800153e:	d10e      	bne.n	800155e <HAL_RCC_OscConfig+0xa2>
 8001540:	4ba9      	ldr	r3, [pc, #676]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4ba8      	ldr	r3, [pc, #672]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	02c9      	lsls	r1, r1, #11
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	4ba6      	ldr	r3, [pc, #664]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4ba5      	ldr	r3, [pc, #660]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	0249      	lsls	r1, r1, #9
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e00b      	b.n	8001576 <HAL_RCC_OscConfig+0xba>
 800155e:	4ba2      	ldr	r3, [pc, #648]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4ba1      	ldr	r3, [pc, #644]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001564:	49a1      	ldr	r1, [pc, #644]	; (80017ec <HAL_RCC_OscConfig+0x330>)
 8001566:	400a      	ands	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	4b9f      	ldr	r3, [pc, #636]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b9e      	ldr	r3, [pc, #632]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001570:	499f      	ldr	r1, [pc, #636]	; (80017f0 <HAL_RCC_OscConfig+0x334>)
 8001572:	400a      	ands	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d014      	beq.n	80015a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff fb39 	bl	8000bf4 <HAL_GetTick>
 8001582:	0003      	movs	r3, r0
 8001584:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fb34 	bl	8000bf4 <HAL_GetTick>
 800158c:	0002      	movs	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e28d      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159a:	4b93      	ldr	r3, [pc, #588]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	029b      	lsls	r3, r3, #10
 80015a2:	4013      	ands	r3, r2
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xcc>
 80015a6:	e015      	b.n	80015d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb24 	bl	8000bf4 <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b2:	f7ff fb1f 	bl	8000bf4 <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e278      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c4:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	029b      	lsls	r3, r3, #10
 80015cc:	4013      	ands	r3, r2
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0xf6>
 80015d0:	e000      	b.n	80015d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2202      	movs	r2, #2
 80015da:	4013      	ands	r3, r2
 80015dc:	d100      	bne.n	80015e0 <HAL_RCC_OscConfig+0x124>
 80015de:	e099      	b.n	8001714 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e0:	4b81      	ldr	r3, [pc, #516]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2238      	movs	r2, #56	; 0x38
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ea:	4b7f      	ldr	r3, [pc, #508]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2203      	movs	r2, #3
 80015f0:	4013      	ands	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b10      	cmp	r3, #16
 80015f8:	d102      	bne.n	8001600 <HAL_RCC_OscConfig+0x144>
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d002      	beq.n	8001606 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d135      	bne.n	8001672 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001606:	4b78      	ldr	r3, [pc, #480]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4013      	ands	r3, r2
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x162>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e24b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b72      	ldr	r3, [pc, #456]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a74      	ldr	r2, [pc, #464]	; (80017f4 <HAL_RCC_OscConfig+0x338>)
 8001624:	4013      	ands	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	021a      	lsls	r2, r3, #8
 800162e:	4b6e      	ldr	r3, [pc, #440]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001630:	430a      	orrs	r2, r1
 8001632:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d112      	bne.n	8001660 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800163a:	4b6b      	ldr	r3, [pc, #428]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6e      	ldr	r2, [pc, #440]	; (80017f8 <HAL_RCC_OscConfig+0x33c>)
 8001640:	4013      	ands	r3, r2
 8001642:	0019      	movs	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800164e:	4b66      	ldr	r3, [pc, #408]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	0adb      	lsrs	r3, r3, #11
 8001654:	2207      	movs	r2, #7
 8001656:	4013      	ands	r3, r2
 8001658:	4a68      	ldr	r2, [pc, #416]	; (80017fc <HAL_RCC_OscConfig+0x340>)
 800165a:	40da      	lsrs	r2, r3
 800165c:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x344>)
 800165e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x348>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fa69 	bl	8000b3c <HAL_InitTick>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d051      	beq.n	8001712 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e221      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d030      	beq.n	80016dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800167a:	4b5b      	ldr	r3, [pc, #364]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a5e      	ldr	r2, [pc, #376]	; (80017f8 <HAL_RCC_OscConfig+0x33c>)
 8001680:	4013      	ands	r3, r2
 8001682:	0019      	movs	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800168e:	4b56      	ldr	r3, [pc, #344]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	0049      	lsls	r1, r1, #1
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff faaa 	bl	8000bf4 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff faa5 	bl	8000bf4 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e1fe      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b8:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4013      	ands	r3, r2
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c4:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_RCC_OscConfig+0x338>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	0019      	movs	r1, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	021a      	lsls	r2, r3, #8
 80016d4:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	430a      	orrs	r2, r1
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	e01b      	b.n	8001714 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80016dc:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	4949      	ldr	r1, [pc, #292]	; (8001808 <HAL_RCC_OscConfig+0x34c>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fa84 	bl	8000bf4 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff fa7f 	bl	8000bf4 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e1d8      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4013      	ands	r3, r2
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x236>
 8001710:	e000      	b.n	8001714 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001712:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2208      	movs	r2, #8
 800171a:	4013      	ands	r3, r2
 800171c:	d047      	beq.n	80017ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800171e:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2238      	movs	r2, #56	; 0x38
 8001724:	4013      	ands	r3, r2
 8001726:	2b18      	cmp	r3, #24
 8001728:	d10a      	bne.n	8001740 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800172a:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d03c      	beq.n	80017ae <HAL_RCC_OscConfig+0x2f2>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d138      	bne.n	80017ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e1ba      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d019      	beq.n	800177c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 800174a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800174c:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 800174e:	2101      	movs	r1, #1
 8001750:	430a      	orrs	r2, r1
 8001752:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fa4e 	bl	8000bf4 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175e:	f7ff fa49 	bl	8000bf4 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1a2      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001774:	2202      	movs	r2, #2
 8001776:	4013      	ands	r3, r2
 8001778:	d0f1      	beq.n	800175e <HAL_RCC_OscConfig+0x2a2>
 800177a:	e018      	b.n	80017ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 800177e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 8001782:	2101      	movs	r1, #1
 8001784:	438a      	bics	r2, r1
 8001786:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fa34 	bl	8000bf4 <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001792:	f7ff fa2f 	bl	8000bf4 <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e188      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80017a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a8:	2202      	movs	r2, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	d1f1      	bne.n	8001792 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2204      	movs	r2, #4
 80017b4:	4013      	ands	r3, r2
 80017b6:	d100      	bne.n	80017ba <HAL_RCC_OscConfig+0x2fe>
 80017b8:	e0c6      	b.n	8001948 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ba:	231f      	movs	r3, #31
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2238      	movs	r2, #56	; 0x38
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	d11e      	bne.n	800180c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	2202      	movs	r2, #2
 80017d4:	4013      	ands	r3, r2
 80017d6:	d100      	bne.n	80017da <HAL_RCC_OscConfig+0x31e>
 80017d8:	e0b6      	b.n	8001948 <HAL_RCC_OscConfig+0x48c>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d000      	beq.n	80017e4 <HAL_RCC_OscConfig+0x328>
 80017e2:	e0b1      	b.n	8001948 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e166      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	fffeffff 	.word	0xfffeffff
 80017f0:	fffbffff 	.word	0xfffbffff
 80017f4:	ffff80ff 	.word	0xffff80ff
 80017f8:	ffffc7ff 	.word	0xffffc7ff
 80017fc:	00f42400 	.word	0x00f42400
 8001800:	20000014 	.word	0x20000014
 8001804:	20000018 	.word	0x20000018
 8001808:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800180c:	4bac      	ldr	r3, [pc, #688]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 800180e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	055b      	lsls	r3, r3, #21
 8001814:	4013      	ands	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_RCC_OscConfig+0x360>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x362>
 800181c:	2300      	movs	r3, #0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d011      	beq.n	8001846 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4ba7      	ldr	r3, [pc, #668]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001826:	4ba6      	ldr	r3, [pc, #664]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	0549      	lsls	r1, r1, #21
 800182c:	430a      	orrs	r2, r1
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001830:	4ba3      	ldr	r3, [pc, #652]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	055b      	lsls	r3, r3, #21
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800183e:	231f      	movs	r3, #31
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001846:	4b9f      	ldr	r3, [pc, #636]	; (8001ac4 <HAL_RCC_OscConfig+0x608>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4013      	ands	r3, r2
 8001850:	d11a      	bne.n	8001888 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001852:	4b9c      	ldr	r3, [pc, #624]	; (8001ac4 <HAL_RCC_OscConfig+0x608>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b9b      	ldr	r3, [pc, #620]	; (8001ac4 <HAL_RCC_OscConfig+0x608>)
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	0049      	lsls	r1, r1, #1
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001860:	f7ff f9c8 	bl	8000bf4 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186a:	f7ff f9c3 	bl	8000bf4 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e11c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187c:	4b91      	ldr	r3, [pc, #580]	; (8001ac4 <HAL_RCC_OscConfig+0x608>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4013      	ands	r3, r2
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x3e2>
 8001890:	4b8b      	ldr	r3, [pc, #556]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001892:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001894:	4b8a      	ldr	r3, [pc, #552]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	65da      	str	r2, [r3, #92]	; 0x5c
 800189c:	e01c      	b.n	80018d8 <HAL_RCC_OscConfig+0x41c>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x404>
 80018a6:	4b86      	ldr	r3, [pc, #536]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80018a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018aa:	4b85      	ldr	r3, [pc, #532]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80018ac:	2104      	movs	r1, #4
 80018ae:	430a      	orrs	r2, r1
 80018b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80018b2:	4b83      	ldr	r3, [pc, #524]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80018b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018b6:	4b82      	ldr	r3, [pc, #520]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80018b8:	2101      	movs	r1, #1
 80018ba:	430a      	orrs	r2, r1
 80018bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0x41c>
 80018c0:	4b7f      	ldr	r3, [pc, #508]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80018c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018c4:	4b7e      	ldr	r3, [pc, #504]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80018c6:	2101      	movs	r1, #1
 80018c8:	438a      	bics	r2, r1
 80018ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80018cc:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80018ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018d0:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80018d2:	2104      	movs	r1, #4
 80018d4:	438a      	bics	r2, r1
 80018d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d014      	beq.n	800190a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f988 	bl	8000bf4 <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e8:	e009      	b.n	80018fe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7ff f983 	bl	8000bf4 <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	4a74      	ldr	r2, [pc, #464]	; (8001ac8 <HAL_RCC_OscConfig+0x60c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e0db      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fe:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x42e>
 8001908:	e013      	b.n	8001932 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff f973 	bl	8000bf4 <HAL_GetTick>
 800190e:	0003      	movs	r3, r0
 8001910:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001912:	e009      	b.n	8001928 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7ff f96e 	bl	8000bf4 <HAL_GetTick>
 8001918:	0002      	movs	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	4a6a      	ldr	r2, [pc, #424]	; (8001ac8 <HAL_RCC_OscConfig+0x60c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0c6      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 800192a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001932:	231f      	movs	r3, #31
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d105      	bne.n	8001948 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800193c:	4b60      	ldr	r3, [pc, #384]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 800193e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001940:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001942:	4962      	ldr	r1, [pc, #392]	; (8001acc <HAL_RCC_OscConfig+0x610>)
 8001944:	400a      	ands	r2, r1
 8001946:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d100      	bne.n	8001952 <HAL_RCC_OscConfig+0x496>
 8001950:	e0b0      	b.n	8001ab4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001952:	4b5b      	ldr	r3, [pc, #364]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2238      	movs	r2, #56	; 0x38
 8001958:	4013      	ands	r3, r2
 800195a:	2b10      	cmp	r3, #16
 800195c:	d100      	bne.n	8001960 <HAL_RCC_OscConfig+0x4a4>
 800195e:	e078      	b.n	8001a52 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d153      	bne.n	8001a10 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001968:	4b55      	ldr	r3, [pc, #340]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b54      	ldr	r3, [pc, #336]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 800196e:	4958      	ldr	r1, [pc, #352]	; (8001ad0 <HAL_RCC_OscConfig+0x614>)
 8001970:	400a      	ands	r2, r1
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f93e 	bl	8000bf4 <HAL_GetTick>
 8001978:	0003      	movs	r3, r0
 800197a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff f939 	bl	8000bf4 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e092      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	049b      	lsls	r3, r3, #18
 8001998:	4013      	ands	r3, r2
 800199a:	d1f0      	bne.n	800197e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199c:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <HAL_RCC_OscConfig+0x618>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1a      	ldr	r2, [r3, #32]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	431a      	orrs	r2, r3
 80019c4:	4b3e      	ldr	r3, [pc, #248]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	0449      	lsls	r1, r1, #17
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80019d8:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	0549      	lsls	r1, r1, #21
 80019e2:	430a      	orrs	r2, r1
 80019e4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff f905 	bl	8000bf4 <HAL_GetTick>
 80019ea:	0003      	movs	r3, r0
 80019ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f900 	bl	8000bf4 <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e059      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	049b      	lsls	r3, r3, #18
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x534>
 8001a0e:	e051      	b.n	8001ab4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001a16:	492e      	ldr	r1, [pc, #184]	; (8001ad0 <HAL_RCC_OscConfig+0x614>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f8ea 	bl	8000bf4 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f8e5 	bl	8000bf4 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e03e      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	049b      	lsls	r3, r3, #18
 8001a40:	4013      	ands	r3, r2
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001a4a:	4923      	ldr	r1, [pc, #140]	; (8001ad8 <HAL_RCC_OscConfig+0x61c>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	e030      	b.n	8001ab4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e02b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_RCC_OscConfig+0x604>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2203      	movs	r2, #3
 8001a68:	401a      	ands	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d11e      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2270      	movs	r2, #112	; 0x70
 8001a76:	401a      	ands	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d117      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	23fe      	movs	r3, #254	; 0xfe
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d10e      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	23f8      	movs	r3, #248	; 0xf8
 8001a96:	039b      	lsls	r3, r3, #14
 8001a98:	401a      	ands	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	0f5b      	lsrs	r3, r3, #29
 8001aa6:	075a      	lsls	r2, r3, #29
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b008      	add	sp, #32
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	00001388 	.word	0x00001388
 8001acc:	efffffff 	.word	0xefffffff
 8001ad0:	feffffff 	.word	0xfeffffff
 8001ad4:	1fc1808c 	.word	0x1fc1808c
 8001ad8:	effefffc 	.word	0xeffefffc

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0e9      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b76      	ldr	r3, [pc, #472]	; (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2207      	movs	r2, #7
 8001af6:	4013      	ands	r3, r2
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d91e      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b73      	ldr	r3, [pc, #460]	; (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2207      	movs	r2, #7
 8001b04:	4393      	bics	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b10:	f7ff f870 	bl	8000bf4 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b18:	e009      	b.n	8001b2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7ff f86b 	bl	8000bf4 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	4a6a      	ldr	r2, [pc, #424]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e0ca      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b2e:	4b67      	ldr	r3, [pc, #412]	; (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2207      	movs	r2, #7
 8001b34:	4013      	ands	r3, r2
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d1ee      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d015      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d006      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b50:	4b60      	ldr	r3, [pc, #384]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4b5f      	ldr	r3, [pc, #380]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b56:	21e0      	movs	r1, #224	; 0xe0
 8001b58:	01c9      	lsls	r1, r1, #7
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4a5d      	ldr	r2, [pc, #372]	; (8001cd8 <HAL_RCC_ClockConfig+0x1fc>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	0019      	movs	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d057      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	029b      	lsls	r3, r3, #10
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d12b      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e097      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d107      	bne.n	8001bac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	049b      	lsls	r3, r3, #18
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d11f      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e08b      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb4:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d113      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e07f      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bcc:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d108      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e074      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bda:	4b3e      	ldr	r3, [pc, #248]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e06d      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2207      	movs	r2, #7
 8001bee:	4393      	bics	r3, r2
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bfc:	f7fe fffa 	bl	8000bf4 <HAL_GetTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c04:	e009      	b.n	8001c1a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c06:	f7fe fff5 	bl	8000bf4 <HAL_GetTick>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e054      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2238      	movs	r2, #56	; 0x38
 8001c20:	401a      	ands	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1ec      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2207      	movs	r2, #7
 8001c32:	4013      	ands	r3, r2
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d21e      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2207      	movs	r2, #7
 8001c40:	4393      	bics	r3, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c4c:	f7fe ffd2 	bl	8000bf4 <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c54:	e009      	b.n	8001c6a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c56:	f7fe ffcd 	bl	8000bf4 <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e02c      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2207      	movs	r2, #7
 8001c70:	4013      	ands	r3, r2
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d1ee      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d009      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <HAL_RCC_ClockConfig+0x200>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c92:	430a      	orrs	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c96:	f000 f829 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8001c9a:	0001      	movs	r1, r0
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_RCC_ClockConfig+0x204>)
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	58d3      	ldr	r3, [r2, r3]
 8001cac:	221f      	movs	r2, #31
 8001cae:	4013      	ands	r3, r2
 8001cb0:	000a      	movs	r2, r1
 8001cb2:	40da      	lsrs	r2, r3
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RCC_ClockConfig+0x208>)
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_ClockConfig+0x20c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7fe ff3d 	bl	8000b3c <HAL_InitTick>
 8001cc2:	0003      	movs	r3, r0
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b004      	add	sp, #16
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	00001388 	.word	0x00001388
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	fffff0ff 	.word	0xfffff0ff
 8001cdc:	ffff8fff 	.word	0xffff8fff
 8001ce0:	080046a4 	.word	0x080046a4
 8001ce4:	20000014 	.word	0x20000014
 8001ce8:	20000018 	.word	0x20000018

08001cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2238      	movs	r2, #56	; 0x38
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d10f      	bne.n	8001d1c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001cfc:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0adb      	lsrs	r3, r3, #11
 8001d02:	2207      	movs	r2, #7
 8001d04:	4013      	ands	r3, r2
 8001d06:	2201      	movs	r2, #1
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	4835      	ldr	r0, [pc, #212]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d12:	f7fe f9f5 	bl	8000100 <__udivsi3>
 8001d16:	0003      	movs	r3, r0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	e05d      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2238      	movs	r2, #56	; 0x38
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d102      	bne.n	8001d2e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d28:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_RCC_GetSysClockFreq+0x100>)
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	e054      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d2e:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2238      	movs	r2, #56	; 0x38
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b10      	cmp	r3, #16
 8001d38:	d138      	bne.n	8001dac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2203      	movs	r2, #3
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	2207      	movs	r2, #7
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	3301      	adds	r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d10d      	bne.n	8001d74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	4824      	ldr	r0, [pc, #144]	; (8001dec <HAL_RCC_GetSysClockFreq+0x100>)
 8001d5c:	f7fe f9d0 	bl	8000100 <__udivsi3>
 8001d60:	0003      	movs	r3, r0
 8001d62:	0019      	movs	r1, r3
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	227f      	movs	r2, #127	; 0x7f
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	434b      	muls	r3, r1
 8001d70:	617b      	str	r3, [r7, #20]
        break;
 8001d72:	e00d      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	481c      	ldr	r0, [pc, #112]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d78:	f7fe f9c2 	bl	8000100 <__udivsi3>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	0019      	movs	r1, r3
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	227f      	movs	r2, #127	; 0x7f
 8001d88:	4013      	ands	r3, r2
 8001d8a:	434b      	muls	r3, r1
 8001d8c:	617b      	str	r3, [r7, #20]
        break;
 8001d8e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0f5b      	lsrs	r3, r3, #29
 8001d96:	2207      	movs	r2, #7
 8001d98:	4013      	ands	r3, r2
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	6978      	ldr	r0, [r7, #20]
 8001da2:	f7fe f9ad 	bl	8000100 <__udivsi3>
 8001da6:	0003      	movs	r3, r0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	e015      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2238      	movs	r2, #56	; 0x38
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d103      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2238      	movs	r2, #56	; 0x38
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b18      	cmp	r3, #24
 8001dca:	d103      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001dcc:	23fa      	movs	r3, #250	; 0xfa
 8001dce:	01db      	lsls	r3, r3, #7
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	e001      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001dd8:	693b      	ldr	r3, [r7, #16]
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b006      	add	sp, #24
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	40021000 	.word	0x40021000
 8001de8:	00f42400 	.word	0x00f42400
 8001dec:	007a1200 	.word	0x007a1200

08001df0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df4:	4b02      	ldr	r3, [pc, #8]	; (8001e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	20000014 	.word	0x20000014

08001e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e04:	b5b0      	push	{r4, r5, r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e08:	f7ff fff2 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e0c:	0004      	movs	r4, r0
 8001e0e:	f7ff fb49 	bl	80014a4 <LL_RCC_GetAPB1Prescaler>
 8001e12:	0003      	movs	r3, r0
 8001e14:	0b1a      	lsrs	r2, r3, #12
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	58d3      	ldr	r3, [r2, r3]
 8001e1c:	221f      	movs	r2, #31
 8001e1e:	4013      	ands	r3, r2
 8001e20:	40dc      	lsrs	r4, r3
 8001e22:	0023      	movs	r3, r4
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bdb0      	pop	{r4, r5, r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	080046e4 	.word	0x080046e4

08001e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e38:	2313      	movs	r3, #19
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e40:	2312      	movs	r3, #18
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	029b      	lsls	r3, r3, #10
 8001e50:	4013      	ands	r3, r2
 8001e52:	d100      	bne.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e54:	e0a3      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2011      	movs	r0, #17
 8001e58:	183b      	adds	r3, r7, r0
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b7f      	ldr	r3, [pc, #508]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	055b      	lsls	r3, r3, #21
 8001e66:	4013      	ands	r3, r2
 8001e68:	d110      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b7c      	ldr	r3, [pc, #496]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e6e:	4b7b      	ldr	r3, [pc, #492]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	0549      	lsls	r1, r1, #21
 8001e74:	430a      	orrs	r2, r1
 8001e76:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e78:	4b78      	ldr	r3, [pc, #480]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	055b      	lsls	r3, r3, #21
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e8c:	4b74      	ldr	r3, [pc, #464]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b73      	ldr	r3, [pc, #460]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	0049      	lsls	r1, r1, #1
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e9a:	f7fe feab 	bl	8000bf4 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea4:	f7fe fea6 	bl	8000bf4 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d904      	bls.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001eb2:	2313      	movs	r3, #19
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	701a      	strb	r2, [r3, #0]
        break;
 8001eba:	e005      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ebc:	4b68      	ldr	r3, [pc, #416]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d0ed      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ec8:	2313      	movs	r3, #19
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d154      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ed2:	4b62      	ldr	r3, [pc, #392]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ed4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ed6:	23c0      	movs	r3, #192	; 0xc0
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d019      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d014      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001eee:	4b5b      	ldr	r3, [pc, #364]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	4a5c      	ldr	r2, [pc, #368]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ef8:	4b58      	ldr	r3, [pc, #352]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001efa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001efc:	4b57      	ldr	r3, [pc, #348]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	0249      	lsls	r1, r1, #9
 8001f02:	430a      	orrs	r2, r1
 8001f04:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f06:	4b55      	ldr	r3, [pc, #340]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f0a:	4b54      	ldr	r3, [pc, #336]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f0c:	4956      	ldr	r1, [pc, #344]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001f0e:	400a      	ands	r2, r1
 8001f10:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f12:	4b52      	ldr	r3, [pc, #328]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d016      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe fe68 	bl	8000bf4 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f28:	e00c      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7fe fe63 	bl	8000bf4 <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	4a4d      	ldr	r2, [pc, #308]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d904      	bls.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f3a:	2313      	movs	r3, #19
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2203      	movs	r2, #3
 8001f40:	701a      	strb	r2, [r3, #0]
            break;
 8001f42:	e004      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f44:	4b45      	ldr	r3, [pc, #276]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d0ed      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f4e:	2313      	movs	r3, #19
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10a      	bne.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f58:	4b40      	ldr	r3, [pc, #256]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5c:	4a41      	ldr	r2, [pc, #260]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f6c:	e00c      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f6e:	2312      	movs	r3, #18
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	2213      	movs	r2, #19
 8001f74:	18ba      	adds	r2, r7, r2
 8001f76:	7812      	ldrb	r2, [r2, #0]
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	e005      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f7c:	2312      	movs	r3, #18
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	2213      	movs	r2, #19
 8001f82:	18ba      	adds	r2, r7, r2
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f88:	2311      	movs	r3, #17
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b32      	ldr	r3, [pc, #200]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f98:	4935      	ldr	r1, [pc, #212]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d009      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	2203      	movs	r2, #3
 8001fae:	4393      	bics	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	4b29      	ldr	r3, [pc, #164]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d009      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fc6:	4b25      	ldr	r3, [pc, #148]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	4b21      	ldr	r3, [pc, #132]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	01db      	lsls	r3, r3, #7
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d015      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	0899      	lsrs	r1, r3, #2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	05db      	lsls	r3, r3, #23
 8002000:	429a      	cmp	r2, r3
 8002002:	d106      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	0249      	lsls	r1, r1, #9
 800200e:	430a      	orrs	r2, r1
 8002010:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	4013      	ands	r3, r2
 800201c:	d016      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002024:	4013      	ands	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800202e:	430a      	orrs	r2, r1
 8002030:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	01db      	lsls	r3, r3, #7
 800203a:	429a      	cmp	r2, r3
 800203c:	d106      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	0249      	lsls	r1, r1, #9
 8002048:	430a      	orrs	r2, r1
 800204a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800204c:	2312      	movs	r3, #18
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	781b      	ldrb	r3, [r3, #0]
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b006      	add	sp, #24
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	fffffcff 	.word	0xfffffcff
 8002068:	fffeffff 	.word	0xfffeffff
 800206c:	00001388 	.word	0x00001388
 8002070:	efffffff 	.word	0xefffffff
 8002074:	ffffcfff 	.word	0xffffcfff
 8002078:	ffff3fff 	.word	0xffff3fff

0800207c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e046      	b.n	800211c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2288      	movs	r2, #136	; 0x88
 8002092:	589b      	ldr	r3, [r3, r2]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2284      	movs	r2, #132	; 0x84
 800209c:	2100      	movs	r1, #0
 800209e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	0018      	movs	r0, r3
 80020a4:	f7fe fc34 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2288      	movs	r2, #136	; 0x88
 80020ac:	2124      	movs	r1, #36	; 0x24
 80020ae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2101      	movs	r1, #1
 80020bc:	438a      	bics	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 fe6a 	bl	8002da4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 fcfc 	bl	8002ad0 <UART_SetConfig>
 80020d8:	0003      	movs	r3, r0
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e01c      	b.n	800211c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	490d      	ldr	r1, [pc, #52]	; (8002124 <HAL_UART_Init+0xa8>)
 80020ee:	400a      	ands	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	212a      	movs	r1, #42	; 0x2a
 80020fe:	438a      	bics	r2, r1
 8002100:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f000 fef9 	bl	8002f0c <UART_CheckIdleState>
 800211a:	0003      	movs	r3, r0
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}
 8002124:	ffffb7ff 	.word	0xffffb7ff

08002128 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	1dbb      	adds	r3, r7, #6
 8002134:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2288      	movs	r2, #136	; 0x88
 800213a:	589b      	ldr	r3, [r3, r2]
 800213c:	2b20      	cmp	r3, #32
 800213e:	d000      	beq.n	8002142 <HAL_UART_Transmit_IT+0x1a>
 8002140:	e08d      	b.n	800225e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_UART_Transmit_IT+0x28>
 8002148:	1dbb      	adds	r3, r7, #6
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e085      	b.n	8002260 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	429a      	cmp	r2, r3
 800215e:	d109      	bne.n	8002174 <HAL_UART_Transmit_IT+0x4c>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2201      	movs	r2, #1
 800216c:	4013      	ands	r3, r2
 800216e:	d001      	beq.n	8002174 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e075      	b.n	8002260 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1dba      	adds	r2, r7, #6
 800217e:	2154      	movs	r1, #84	; 0x54
 8002180:	8812      	ldrh	r2, [r2, #0]
 8002182:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1dba      	adds	r2, r7, #6
 8002188:	2156      	movs	r1, #86	; 0x56
 800218a:	8812      	ldrh	r2, [r2, #0]
 800218c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2290      	movs	r2, #144	; 0x90
 8002198:	2100      	movs	r1, #0
 800219a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2288      	movs	r2, #136	; 0x88
 80021a0:	2121      	movs	r1, #33	; 0x21
 80021a2:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	059b      	lsls	r3, r3, #22
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d12a      	bne.n	8002206 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_UART_Transmit_IT+0xa4>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d103      	bne.n	80021cc <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a28      	ldr	r2, [pc, #160]	; (8002268 <HAL_UART_Transmit_IT+0x140>)
 80021c8:	679a      	str	r2, [r3, #120]	; 0x78
 80021ca:	e002      	b.n	80021d2 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a27      	ldr	r2, [pc, #156]	; (800226c <HAL_UART_Transmit_IT+0x144>)
 80021d0:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d2:	f3ef 8310 	mrs	r3, PRIMASK
 80021d6:	61fb      	str	r3, [r7, #28]
  return(result);
 80021d8:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
 80021dc:	2301      	movs	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f383 8810 	msr	PRIMASK, r3
}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2180      	movs	r1, #128	; 0x80
 80021f4:	0409      	lsls	r1, r1, #16
 80021f6:	430a      	orrs	r2, r1
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f383 8810 	msr	PRIMASK, r3
}
 8002204:	e029      	b.n	800225a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	015b      	lsls	r3, r3, #5
 800220e:	429a      	cmp	r2, r3
 8002210:	d107      	bne.n	8002222 <HAL_UART_Transmit_IT+0xfa>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <HAL_UART_Transmit_IT+0x148>)
 800221e:	679a      	str	r2, [r3, #120]	; 0x78
 8002220:	e002      	b.n	8002228 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_UART_Transmit_IT+0x14c>)
 8002226:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002228:	f3ef 8310 	mrs	r3, PRIMASK
 800222c:	613b      	str	r3, [r7, #16]
  return(result);
 800222e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002232:	2301      	movs	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f383 8810 	msr	PRIMASK, r3
}
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f383 8810 	msr	PRIMASK, r3
}
 8002258:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
  }
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b00c      	add	sp, #48	; 0x30
 8002266:	bd80      	pop	{r7, pc}
 8002268:	0800389d 	.word	0x0800389d
 800226c:	080037b1 	.word	0x080037b1
 8002270:	080036f3 	.word	0x080036f3
 8002274:	0800363f 	.word	0x0800363f

08002278 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	1dbb      	adds	r3, r7, #6
 8002284:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	228c      	movs	r2, #140	; 0x8c
 800228a:	589b      	ldr	r3, [r3, r2]
 800228c:	2b20      	cmp	r3, #32
 800228e:	d145      	bne.n	800231c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_UART_Receive_IT+0x26>
 8002296:	1dbb      	adds	r3, r7, #6
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e03d      	b.n	800231e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	015b      	lsls	r3, r3, #5
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d109      	bne.n	80022c2 <HAL_UART_Receive_IT+0x4a>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d105      	bne.n	80022c2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2201      	movs	r2, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	d001      	beq.n	80022c2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e02d      	b.n	800231e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	4013      	ands	r3, r2
 80022d4:	d019      	beq.n	800230a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d6:	f3ef 8310 	mrs	r3, PRIMASK
 80022da:	613b      	str	r3, [r7, #16]
  return(result);
 80022dc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	2301      	movs	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f383 8810 	msr	PRIMASK, r3
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	04c9      	lsls	r1, r1, #19
 80022fa:	430a      	orrs	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f383 8810 	msr	PRIMASK, r3
}
 8002308:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800230a:	1dbb      	adds	r3, r7, #6
 800230c:	881a      	ldrh	r2, [r3, #0]
 800230e:	68b9      	ldr	r1, [r7, #8]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	0018      	movs	r0, r3
 8002314:	f000 ff14 	bl	8003140 <UART_Start_Receive_IT>
 8002318:	0003      	movs	r3, r0
 800231a:	e000      	b.n	800231e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b008      	add	sp, #32
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	1dbb      	adds	r3, r7, #6
 8002334:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2288      	movs	r2, #136	; 0x88
 800233a:	589b      	ldr	r3, [r3, r2]
 800233c:	2b20      	cmp	r3, #32
 800233e:	d000      	beq.n	8002342 <HAL_UART_Transmit_DMA+0x1a>
 8002340:	e079      	b.n	8002436 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_UART_Transmit_DMA+0x28>
 8002348:	1dbb      	adds	r3, r7, #6
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e071      	b.n	8002438 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	015b      	lsls	r3, r3, #5
 800235c:	429a      	cmp	r2, r3
 800235e:	d109      	bne.n	8002374 <HAL_UART_Transmit_DMA+0x4c>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2201      	movs	r2, #1
 800236c:	4013      	ands	r3, r2
 800236e:	d001      	beq.n	8002374 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e061      	b.n	8002438 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1dba      	adds	r2, r7, #6
 800237e:	2154      	movs	r1, #84	; 0x54
 8002380:	8812      	ldrh	r2, [r2, #0]
 8002382:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1dba      	adds	r2, r7, #6
 8002388:	2156      	movs	r1, #86	; 0x56
 800238a:	8812      	ldrh	r2, [r2, #0]
 800238c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2290      	movs	r2, #144	; 0x90
 8002392:	2100      	movs	r1, #0
 8002394:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2288      	movs	r2, #136	; 0x88
 800239a:	2121      	movs	r1, #33	; 0x21
 800239c:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <HAL_UART_Transmit_DMA+0x118>)
 80023ac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b2:	4a24      	ldr	r2, [pc, #144]	; (8002444 <HAL_UART_Transmit_DMA+0x11c>)
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ba:	4a23      	ldr	r2, [pc, #140]	; (8002448 <HAL_UART_Transmit_DMA+0x120>)
 80023bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c2:	2200      	movs	r2, #0
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ce:	0019      	movs	r1, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3328      	adds	r3, #40	; 0x28
 80023d6:	001a      	movs	r2, r3
 80023d8:	1dbb      	adds	r3, r7, #6
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	f7fe fcf2 	bl	8000dc4 <HAL_DMA_Start_IT>
 80023e0:	1e03      	subs	r3, r0, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2290      	movs	r2, #144	; 0x90
 80023e8:	2110      	movs	r1, #16
 80023ea:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2288      	movs	r2, #136	; 0x88
 80023f0:	2120      	movs	r1, #32
 80023f2:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e01f      	b.n	8002438 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002400:	f3ef 8310 	mrs	r3, PRIMASK
 8002404:	613b      	str	r3, [r7, #16]
  return(result);
 8002406:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	2301      	movs	r3, #1
 800240c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f383 8810 	msr	PRIMASK, r3
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	430a      	orrs	r2, r1
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f383 8810 	msr	PRIMASK, r3
}
 8002430:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8002436:	2302      	movs	r3, #2
  }
}
 8002438:	0018      	movs	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	b008      	add	sp, #32
 800243e:	bd80      	pop	{r7, pc}
 8002440:	080034d5 	.word	0x080034d5
 8002444:	0800356d 	.word	0x0800356d
 8002448:	0800358b 	.word	0x0800358b

0800244c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800244c:	b5b0      	push	{r4, r5, r7, lr}
 800244e:	b0aa      	sub	sp, #168	; 0xa8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	22a4      	movs	r2, #164	; 0xa4
 800245c:	18b9      	adds	r1, r7, r2
 800245e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	20a0      	movs	r0, #160	; 0xa0
 8002468:	1839      	adds	r1, r7, r0
 800246a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	249c      	movs	r4, #156	; 0x9c
 8002474:	1939      	adds	r1, r7, r4
 8002476:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002478:	0011      	movs	r1, r2
 800247a:	18bb      	adds	r3, r7, r2
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4aa2      	ldr	r2, [pc, #648]	; (8002708 <HAL_UART_IRQHandler+0x2bc>)
 8002480:	4013      	ands	r3, r2
 8002482:	2298      	movs	r2, #152	; 0x98
 8002484:	18bd      	adds	r5, r7, r2
 8002486:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002488:	18bb      	adds	r3, r7, r2
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d11a      	bne.n	80024c6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002490:	187b      	adds	r3, r7, r1
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2220      	movs	r2, #32
 8002496:	4013      	ands	r3, r2
 8002498:	d015      	beq.n	80024c6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800249a:	183b      	adds	r3, r7, r0
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2220      	movs	r2, #32
 80024a0:	4013      	ands	r3, r2
 80024a2:	d105      	bne.n	80024b0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	055b      	lsls	r3, r3, #21
 80024ac:	4013      	ands	r3, r2
 80024ae:	d00a      	beq.n	80024c6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d100      	bne.n	80024ba <HAL_UART_IRQHandler+0x6e>
 80024b8:	e2dc      	b.n	8002a74 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	0010      	movs	r0, r2
 80024c2:	4798      	blx	r3
      }
      return;
 80024c4:	e2d6      	b.n	8002a74 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024c6:	2398      	movs	r3, #152	; 0x98
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d100      	bne.n	80024d2 <HAL_UART_IRQHandler+0x86>
 80024d0:	e122      	b.n	8002718 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80024d2:	239c      	movs	r3, #156	; 0x9c
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a8c      	ldr	r2, [pc, #560]	; (800270c <HAL_UART_IRQHandler+0x2c0>)
 80024da:	4013      	ands	r3, r2
 80024dc:	d106      	bne.n	80024ec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80024de:	23a0      	movs	r3, #160	; 0xa0
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a8a      	ldr	r2, [pc, #552]	; (8002710 <HAL_UART_IRQHandler+0x2c4>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	d100      	bne.n	80024ec <HAL_UART_IRQHandler+0xa0>
 80024ea:	e115      	b.n	8002718 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024ec:	23a4      	movs	r3, #164	; 0xa4
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	d012      	beq.n	800251e <HAL_UART_IRQHandler+0xd2>
 80024f8:	23a0      	movs	r3, #160	; 0xa0
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4013      	ands	r3, r2
 8002504:	d00b      	beq.n	800251e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2201      	movs	r2, #1
 800250c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2290      	movs	r2, #144	; 0x90
 8002512:	589b      	ldr	r3, [r3, r2]
 8002514:	2201      	movs	r2, #1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2190      	movs	r1, #144	; 0x90
 800251c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800251e:	23a4      	movs	r3, #164	; 0xa4
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d011      	beq.n	800254e <HAL_UART_IRQHandler+0x102>
 800252a:	239c      	movs	r3, #156	; 0x9c
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2201      	movs	r2, #1
 8002532:	4013      	ands	r3, r2
 8002534:	d00b      	beq.n	800254e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2202      	movs	r2, #2
 800253c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2290      	movs	r2, #144	; 0x90
 8002542:	589b      	ldr	r3, [r3, r2]
 8002544:	2204      	movs	r2, #4
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2190      	movs	r1, #144	; 0x90
 800254c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800254e:	23a4      	movs	r3, #164	; 0xa4
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2204      	movs	r2, #4
 8002556:	4013      	ands	r3, r2
 8002558:	d011      	beq.n	800257e <HAL_UART_IRQHandler+0x132>
 800255a:	239c      	movs	r3, #156	; 0x9c
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2201      	movs	r2, #1
 8002562:	4013      	ands	r3, r2
 8002564:	d00b      	beq.n	800257e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2204      	movs	r2, #4
 800256c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2290      	movs	r2, #144	; 0x90
 8002572:	589b      	ldr	r3, [r3, r2]
 8002574:	2202      	movs	r2, #2
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2190      	movs	r1, #144	; 0x90
 800257c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800257e:	23a4      	movs	r3, #164	; 0xa4
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2208      	movs	r2, #8
 8002586:	4013      	ands	r3, r2
 8002588:	d017      	beq.n	80025ba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800258a:	23a0      	movs	r3, #160	; 0xa0
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2220      	movs	r2, #32
 8002592:	4013      	ands	r3, r2
 8002594:	d105      	bne.n	80025a2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002596:	239c      	movs	r3, #156	; 0x9c
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a5b      	ldr	r2, [pc, #364]	; (800270c <HAL_UART_IRQHandler+0x2c0>)
 800259e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025a0:	d00b      	beq.n	80025ba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2208      	movs	r2, #8
 80025a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2290      	movs	r2, #144	; 0x90
 80025ae:	589b      	ldr	r3, [r3, r2]
 80025b0:	2208      	movs	r2, #8
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2190      	movs	r1, #144	; 0x90
 80025b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025ba:	23a4      	movs	r3, #164	; 0xa4
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	4013      	ands	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_UART_IRQHandler+0x1a4>
 80025c8:	23a0      	movs	r3, #160	; 0xa0
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	04db      	lsls	r3, r3, #19
 80025d2:	4013      	ands	r3, r2
 80025d4:	d00c      	beq.n	80025f0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2290      	movs	r2, #144	; 0x90
 80025e4:	589b      	ldr	r3, [r3, r2]
 80025e6:	2220      	movs	r2, #32
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2190      	movs	r1, #144	; 0x90
 80025ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2290      	movs	r2, #144	; 0x90
 80025f4:	589b      	ldr	r3, [r3, r2]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d100      	bne.n	80025fc <HAL_UART_IRQHandler+0x1b0>
 80025fa:	e23d      	b.n	8002a78 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025fc:	23a4      	movs	r3, #164	; 0xa4
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2220      	movs	r2, #32
 8002604:	4013      	ands	r3, r2
 8002606:	d015      	beq.n	8002634 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002608:	23a0      	movs	r3, #160	; 0xa0
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2220      	movs	r2, #32
 8002610:	4013      	ands	r3, r2
 8002612:	d106      	bne.n	8002622 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002614:	239c      	movs	r3, #156	; 0x9c
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	055b      	lsls	r3, r3, #21
 800261e:	4013      	ands	r3, r2
 8002620:	d008      	beq.n	8002634 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	0010      	movs	r0, r2
 8002632:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2290      	movs	r2, #144	; 0x90
 8002638:	589b      	ldr	r3, [r3, r2]
 800263a:	2194      	movs	r1, #148	; 0x94
 800263c:	187a      	adds	r2, r7, r1
 800263e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2240      	movs	r2, #64	; 0x40
 8002648:	4013      	ands	r3, r2
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d004      	beq.n	8002658 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800264e:	187b      	adds	r3, r7, r1
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2228      	movs	r2, #40	; 0x28
 8002654:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002656:	d04c      	beq.n	80026f2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	0018      	movs	r0, r3
 800265c:	f000 fed4 	bl	8003408 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	4013      	ands	r3, r2
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d13c      	bne.n	80026e8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800266e:	f3ef 8310 	mrs	r3, PRIMASK
 8002672:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002676:	2090      	movs	r0, #144	; 0x90
 8002678:	183a      	adds	r2, r7, r0
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	2301      	movs	r3, #1
 800267e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002682:	f383 8810 	msr	PRIMASK, r3
}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2140      	movs	r1, #64	; 0x40
 8002694:	438a      	bics	r2, r1
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	183b      	adds	r3, r7, r0
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a0:	f383 8810 	msr	PRIMASK, r3
}
 80026a4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	589b      	ldr	r3, [r3, r2]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d016      	beq.n	80026de <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	589b      	ldr	r3, [r3, r2]
 80026b6:	4a17      	ldr	r2, [pc, #92]	; (8002714 <HAL_UART_IRQHandler+0x2c8>)
 80026b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	589b      	ldr	r3, [r3, r2]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7fe fc67 	bl	8000f94 <HAL_DMA_Abort_IT>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d01c      	beq.n	8002704 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2280      	movs	r2, #128	; 0x80
 80026ce:	589b      	ldr	r3, [r3, r2]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	5852      	ldr	r2, [r2, r1]
 80026d8:	0010      	movs	r0, r2
 80026da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	e012      	b.n	8002704 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 f9e1 	bl	8002aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e6:	e00d      	b.n	8002704 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f9dc 	bl	8002aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	e008      	b.n	8002704 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 f9d7 	bl	8002aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2290      	movs	r2, #144	; 0x90
 80026fe:	2100      	movs	r1, #0
 8002700:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002702:	e1b9      	b.n	8002a78 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002704:	46c0      	nop			; (mov r8, r8)
    return;
 8002706:	e1b7      	b.n	8002a78 <HAL_UART_IRQHandler+0x62c>
 8002708:	0000080f 	.word	0x0000080f
 800270c:	10000001 	.word	0x10000001
 8002710:	04000120 	.word	0x04000120
 8002714:	08003611 	.word	0x08003611

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d000      	beq.n	8002722 <HAL_UART_IRQHandler+0x2d6>
 8002720:	e13e      	b.n	80029a0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002722:	23a4      	movs	r3, #164	; 0xa4
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2210      	movs	r2, #16
 800272a:	4013      	ands	r3, r2
 800272c:	d100      	bne.n	8002730 <HAL_UART_IRQHandler+0x2e4>
 800272e:	e137      	b.n	80029a0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002730:	23a0      	movs	r3, #160	; 0xa0
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2210      	movs	r2, #16
 8002738:	4013      	ands	r3, r2
 800273a:	d100      	bne.n	800273e <HAL_UART_IRQHandler+0x2f2>
 800273c:	e130      	b.n	80029a0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2210      	movs	r2, #16
 8002744:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2240      	movs	r2, #64	; 0x40
 800274e:	4013      	ands	r3, r2
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d000      	beq.n	8002756 <HAL_UART_IRQHandler+0x30a>
 8002754:	e0a4      	b.n	80028a0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2280      	movs	r2, #128	; 0x80
 800275a:	589b      	ldr	r3, [r3, r2]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	217e      	movs	r1, #126	; 0x7e
 8002762:	187b      	adds	r3, r7, r1
 8002764:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002766:	187b      	adds	r3, r7, r1
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d100      	bne.n	8002770 <HAL_UART_IRQHandler+0x324>
 800276e:	e185      	b.n	8002a7c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	225c      	movs	r2, #92	; 0x5c
 8002774:	5a9b      	ldrh	r3, [r3, r2]
 8002776:	187a      	adds	r2, r7, r1
 8002778:	8812      	ldrh	r2, [r2, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d300      	bcc.n	8002780 <HAL_UART_IRQHandler+0x334>
 800277e:	e17d      	b.n	8002a7c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	187a      	adds	r2, r7, r1
 8002784:	215e      	movs	r1, #94	; 0x5e
 8002786:	8812      	ldrh	r2, [r2, #0]
 8002788:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	589b      	ldr	r3, [r3, r2]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2220      	movs	r2, #32
 8002796:	4013      	ands	r3, r2
 8002798:	d170      	bne.n	800287c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800279a:	f3ef 8310 	mrs	r3, PRIMASK
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80027a4:	2301      	movs	r3, #1
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	f383 8810 	msr	PRIMASK, r3
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	49b4      	ldr	r1, [pc, #720]	; (8002a8c <HAL_UART_IRQHandler+0x640>)
 80027bc:	400a      	ands	r2, r1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c6:	f383 8810 	msr	PRIMASK, r3
}
 80027ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027cc:	f3ef 8310 	mrs	r3, PRIMASK
 80027d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80027d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d4:	677b      	str	r3, [r7, #116]	; 0x74
 80027d6:	2301      	movs	r3, #1
 80027d8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027dc:	f383 8810 	msr	PRIMASK, r3
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	438a      	bics	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f8:	f383 8810 	msr	PRIMASK, r3
}
 80027fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002802:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002804:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002806:	673b      	str	r3, [r7, #112]	; 0x70
 8002808:	2301      	movs	r3, #1
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280e:	f383 8810 	msr	PRIMASK, r3
}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2140      	movs	r1, #64	; 0x40
 8002820:	438a      	bics	r2, r1
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002826:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800282a:	f383 8810 	msr	PRIMASK, r3
}
 800282e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	228c      	movs	r2, #140	; 0x8c
 8002834:	2120      	movs	r1, #32
 8002836:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800283e:	f3ef 8310 	mrs	r3, PRIMASK
 8002842:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002844:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002848:	2301      	movs	r3, #1
 800284a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800284e:	f383 8810 	msr	PRIMASK, r3
}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2110      	movs	r1, #16
 8002860:	438a      	bics	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002866:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286a:	f383 8810 	msr	PRIMASK, r3
}
 800286e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2280      	movs	r2, #128	; 0x80
 8002874:	589b      	ldr	r3, [r3, r2]
 8002876:	0018      	movs	r0, r3
 8002878:	f7fe fb2a 	bl	8000ed0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	225c      	movs	r2, #92	; 0x5c
 8002886:	5a9a      	ldrh	r2, [r3, r2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	215e      	movs	r1, #94	; 0x5e
 800288c:	5a5b      	ldrh	r3, [r3, r1]
 800288e:	b29b      	uxth	r3, r3
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	b29a      	uxth	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f000 f90d 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800289e:	e0ed      	b.n	8002a7c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	225c      	movs	r2, #92	; 0x5c
 80028a4:	5a99      	ldrh	r1, [r3, r2]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	225e      	movs	r2, #94	; 0x5e
 80028aa:	5a9b      	ldrh	r3, [r3, r2]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	208e      	movs	r0, #142	; 0x8e
 80028b0:	183b      	adds	r3, r7, r0
 80028b2:	1a8a      	subs	r2, r1, r2
 80028b4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	225e      	movs	r2, #94	; 0x5e
 80028ba:	5a9b      	ldrh	r3, [r3, r2]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d100      	bne.n	80028c4 <HAL_UART_IRQHandler+0x478>
 80028c2:	e0dd      	b.n	8002a80 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80028c4:	183b      	adds	r3, r7, r0
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d100      	bne.n	80028ce <HAL_UART_IRQHandler+0x482>
 80028cc:	e0d8      	b.n	8002a80 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ce:	f3ef 8310 	mrs	r3, PRIMASK
 80028d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80028d4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028d6:	2488      	movs	r4, #136	; 0x88
 80028d8:	193a      	adds	r2, r7, r4
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	2301      	movs	r3, #1
 80028de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f383 8810 	msr	PRIMASK, r3
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4967      	ldr	r1, [pc, #412]	; (8002a90 <HAL_UART_IRQHandler+0x644>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f383 8810 	msr	PRIMASK, r3
}
 8002904:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002906:	f3ef 8310 	mrs	r3, PRIMASK
 800290a:	61bb      	str	r3, [r7, #24]
  return(result);
 800290c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800290e:	2484      	movs	r4, #132	; 0x84
 8002910:	193a      	adds	r2, r7, r4
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f383 8810 	msr	PRIMASK, r3
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	495a      	ldr	r1, [pc, #360]	; (8002a94 <HAL_UART_IRQHandler+0x648>)
 800292c:	400a      	ands	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	193b      	adds	r3, r7, r4
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f383 8810 	msr	PRIMASK, r3
}
 800293c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	228c      	movs	r2, #140	; 0x8c
 8002942:	2120      	movs	r1, #32
 8002944:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002952:	f3ef 8310 	mrs	r3, PRIMASK
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800295a:	2480      	movs	r4, #128	; 0x80
 800295c:	193a      	adds	r2, r7, r4
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	2301      	movs	r3, #1
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	f383 8810 	msr	PRIMASK, r3
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2110      	movs	r1, #16
 8002978:	438a      	bics	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	193b      	adds	r3, r7, r4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	f383 8810 	msr	PRIMASK, r3
}
 8002988:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002990:	183b      	adds	r3, r7, r0
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	0011      	movs	r1, r2
 8002998:	0018      	movs	r0, r3
 800299a:	f000 f88d 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800299e:	e06f      	b.n	8002a80 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029a0:	23a4      	movs	r3, #164	; 0xa4
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	035b      	lsls	r3, r3, #13
 80029aa:	4013      	ands	r3, r2
 80029ac:	d010      	beq.n	80029d0 <HAL_UART_IRQHandler+0x584>
 80029ae:	239c      	movs	r3, #156	; 0x9c
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	03db      	lsls	r3, r3, #15
 80029b8:	4013      	ands	r3, r2
 80029ba:	d009      	beq.n	80029d0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2280      	movs	r2, #128	; 0x80
 80029c2:	0352      	lsls	r2, r2, #13
 80029c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f001 fd01 	bl	80043d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029ce:	e05a      	b.n	8002a86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80029d0:	23a4      	movs	r3, #164	; 0xa4
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	4013      	ands	r3, r2
 80029da:	d016      	beq.n	8002a0a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80029dc:	23a0      	movs	r3, #160	; 0xa0
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	4013      	ands	r3, r2
 80029e6:	d106      	bne.n	80029f6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80029e8:	239c      	movs	r3, #156	; 0x9c
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	4013      	ands	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d042      	beq.n	8002a84 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	0010      	movs	r0, r2
 8002a06:	4798      	blx	r3
    }
    return;
 8002a08:	e03c      	b.n	8002a84 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a0a:	23a4      	movs	r3, #164	; 0xa4
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2240      	movs	r2, #64	; 0x40
 8002a12:	4013      	ands	r3, r2
 8002a14:	d00a      	beq.n	8002a2c <HAL_UART_IRQHandler+0x5e0>
 8002a16:	23a0      	movs	r3, #160	; 0xa0
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2240      	movs	r2, #64	; 0x40
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d004      	beq.n	8002a2c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 ffb3 	bl	8003990 <UART_EndTransmit_IT>
    return;
 8002a2a:	e02c      	b.n	8002a86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002a2c:	23a4      	movs	r3, #164	; 0xa4
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	041b      	lsls	r3, r3, #16
 8002a36:	4013      	ands	r3, r2
 8002a38:	d00b      	beq.n	8002a52 <HAL_UART_IRQHandler+0x606>
 8002a3a:	23a0      	movs	r3, #160	; 0xa0
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	05db      	lsls	r3, r3, #23
 8002a44:	4013      	ands	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f001 fcd0 	bl	80043f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a50:	e019      	b.n	8002a86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002a52:	23a4      	movs	r3, #164	; 0xa4
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	045b      	lsls	r3, r3, #17
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d012      	beq.n	8002a86 <HAL_UART_IRQHandler+0x63a>
 8002a60:	23a0      	movs	r3, #160	; 0xa0
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da0d      	bge.n	8002a86 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f001 fcb7 	bl	80043e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a72:	e008      	b.n	8002a86 <HAL_UART_IRQHandler+0x63a>
      return;
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	e006      	b.n	8002a86 <HAL_UART_IRQHandler+0x63a>
    return;
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	e004      	b.n	8002a86 <HAL_UART_IRQHandler+0x63a>
      return;
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	e002      	b.n	8002a86 <HAL_UART_IRQHandler+0x63a>
      return;
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	e000      	b.n	8002a86 <HAL_UART_IRQHandler+0x63a>
    return;
 8002a84:	46c0      	nop			; (mov r8, r8)
  }
}
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b02a      	add	sp, #168	; 0xa8
 8002a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a8c:	fffffeff 	.word	0xfffffeff
 8002a90:	fffffedf 	.word	0xfffffedf
 8002a94:	effffffe 	.word	0xeffffffe

08002a98 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	000a      	movs	r2, r1
 8002ac2:	1cbb      	adds	r3, r7, #2
 8002ac4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b002      	add	sp, #8
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ad8:	231a      	movs	r3, #26
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4aa1      	ldr	r2, [pc, #644]	; (8002d84 <UART_SetConfig+0x2b4>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a9c      	ldr	r2, [pc, #624]	; (8002d88 <UART_SetConfig+0x2b8>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	0019      	movs	r1, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a93      	ldr	r2, [pc, #588]	; (8002d8c <UART_SetConfig+0x2bc>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	220f      	movs	r2, #15
 8002b54:	4393      	bics	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a89      	ldr	r2, [pc, #548]	; (8002d90 <UART_SetConfig+0x2c0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d127      	bne.n	8002bbe <UART_SetConfig+0xee>
 8002b6e:	4b89      	ldr	r3, [pc, #548]	; (8002d94 <UART_SetConfig+0x2c4>)
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	2203      	movs	r2, #3
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d017      	beq.n	8002baa <UART_SetConfig+0xda>
 8002b7a:	d81b      	bhi.n	8002bb4 <UART_SetConfig+0xe4>
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d00a      	beq.n	8002b96 <UART_SetConfig+0xc6>
 8002b80:	d818      	bhi.n	8002bb4 <UART_SetConfig+0xe4>
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <UART_SetConfig+0xbc>
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d00a      	beq.n	8002ba0 <UART_SetConfig+0xd0>
 8002b8a:	e013      	b.n	8002bb4 <UART_SetConfig+0xe4>
 8002b8c:	231b      	movs	r3, #27
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e021      	b.n	8002bda <UART_SetConfig+0x10a>
 8002b96:	231b      	movs	r3, #27
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	e01c      	b.n	8002bda <UART_SetConfig+0x10a>
 8002ba0:	231b      	movs	r3, #27
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e017      	b.n	8002bda <UART_SetConfig+0x10a>
 8002baa:	231b      	movs	r3, #27
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	2208      	movs	r2, #8
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e012      	b.n	8002bda <UART_SetConfig+0x10a>
 8002bb4:	231b      	movs	r3, #27
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	2210      	movs	r2, #16
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e00d      	b.n	8002bda <UART_SetConfig+0x10a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a75      	ldr	r2, [pc, #468]	; (8002d98 <UART_SetConfig+0x2c8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d104      	bne.n	8002bd2 <UART_SetConfig+0x102>
 8002bc8:	231b      	movs	r3, #27
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e003      	b.n	8002bda <UART_SetConfig+0x10a>
 8002bd2:	231b      	movs	r3, #27
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2210      	movs	r2, #16
 8002bd8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d000      	beq.n	8002be8 <UART_SetConfig+0x118>
 8002be6:	e065      	b.n	8002cb4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002be8:	231b      	movs	r3, #27
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d015      	beq.n	8002c1e <UART_SetConfig+0x14e>
 8002bf2:	dc18      	bgt.n	8002c26 <UART_SetConfig+0x156>
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d00d      	beq.n	8002c14 <UART_SetConfig+0x144>
 8002bf8:	dc15      	bgt.n	8002c26 <UART_SetConfig+0x156>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <UART_SetConfig+0x134>
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d005      	beq.n	8002c0e <UART_SetConfig+0x13e>
 8002c02:	e010      	b.n	8002c26 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c04:	f7ff f8fe 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	617b      	str	r3, [r7, #20]
        break;
 8002c0c:	e012      	b.n	8002c34 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c0e:	4b63      	ldr	r3, [pc, #396]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002c10:	617b      	str	r3, [r7, #20]
        break;
 8002c12:	e00f      	b.n	8002c34 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c14:	f7ff f86a 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	617b      	str	r3, [r7, #20]
        break;
 8002c1c:	e00a      	b.n	8002c34 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	617b      	str	r3, [r7, #20]
        break;
 8002c24:	e006      	b.n	8002c34 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c2a:	231a      	movs	r3, #26
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
        break;
 8002c32:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d100      	bne.n	8002c3c <UART_SetConfig+0x16c>
 8002c3a:	e08d      	b.n	8002d58 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c40:	4b57      	ldr	r3, [pc, #348]	; (8002da0 <UART_SetConfig+0x2d0>)
 8002c42:	0052      	lsls	r2, r2, #1
 8002c44:	5ad3      	ldrh	r3, [r2, r3]
 8002c46:	0019      	movs	r1, r3
 8002c48:	6978      	ldr	r0, [r7, #20]
 8002c4a:	f7fd fa59 	bl	8000100 <__udivsi3>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	005a      	lsls	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	18d2      	adds	r2, r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	0019      	movs	r1, r3
 8002c60:	0010      	movs	r0, r2
 8002c62:	f7fd fa4d 	bl	8000100 <__udivsi3>
 8002c66:	0003      	movs	r3, r0
 8002c68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b0f      	cmp	r3, #15
 8002c6e:	d91c      	bls.n	8002caa <UART_SetConfig+0x1da>
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	025b      	lsls	r3, r3, #9
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d217      	bcs.n	8002caa <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	200e      	movs	r0, #14
 8002c80:	183b      	adds	r3, r7, r0
 8002c82:	210f      	movs	r1, #15
 8002c84:	438a      	bics	r2, r1
 8002c86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2207      	movs	r2, #7
 8002c90:	4013      	ands	r3, r2
 8002c92:	b299      	uxth	r1, r3
 8002c94:	183b      	adds	r3, r7, r0
 8002c96:	183a      	adds	r2, r7, r0
 8002c98:	8812      	ldrh	r2, [r2, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	183a      	adds	r2, r7, r0
 8002ca4:	8812      	ldrh	r2, [r2, #0]
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	e056      	b.n	8002d58 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002caa:	231a      	movs	r3, #26
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e051      	b.n	8002d58 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cb4:	231b      	movs	r3, #27
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d015      	beq.n	8002cea <UART_SetConfig+0x21a>
 8002cbe:	dc18      	bgt.n	8002cf2 <UART_SetConfig+0x222>
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d00d      	beq.n	8002ce0 <UART_SetConfig+0x210>
 8002cc4:	dc15      	bgt.n	8002cf2 <UART_SetConfig+0x222>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <UART_SetConfig+0x200>
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d005      	beq.n	8002cda <UART_SetConfig+0x20a>
 8002cce:	e010      	b.n	8002cf2 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd0:	f7ff f898 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	617b      	str	r3, [r7, #20]
        break;
 8002cd8:	e012      	b.n	8002d00 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cda:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002cdc:	617b      	str	r3, [r7, #20]
        break;
 8002cde:	e00f      	b.n	8002d00 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ce0:	f7ff f804 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	617b      	str	r3, [r7, #20]
        break;
 8002ce8:	e00a      	b.n	8002d00 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	617b      	str	r3, [r7, #20]
        break;
 8002cf0:	e006      	b.n	8002d00 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002cf6:	231a      	movs	r3, #26
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
        break;
 8002cfe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d028      	beq.n	8002d58 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0a:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <UART_SetConfig+0x2d0>)
 8002d0c:	0052      	lsls	r2, r2, #1
 8002d0e:	5ad3      	ldrh	r3, [r2, r3]
 8002d10:	0019      	movs	r1, r3
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7fd f9f4 	bl	8000100 <__udivsi3>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	18d2      	adds	r2, r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	0019      	movs	r1, r3
 8002d2a:	0010      	movs	r0, r2
 8002d2c:	f7fd f9e8 	bl	8000100 <__udivsi3>
 8002d30:	0003      	movs	r3, r0
 8002d32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	2b0f      	cmp	r3, #15
 8002d38:	d90a      	bls.n	8002d50 <UART_SetConfig+0x280>
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	025b      	lsls	r3, r3, #9
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d205      	bcs.n	8002d50 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	e003      	b.n	8002d58 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002d50:	231a      	movs	r3, #26
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	226a      	movs	r2, #106	; 0x6a
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2268      	movs	r2, #104	; 0x68
 8002d64:	2101      	movs	r1, #1
 8002d66:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002d74:	231a      	movs	r3, #26
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	781b      	ldrb	r3, [r3, #0]
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b008      	add	sp, #32
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	cfff69f3 	.word	0xcfff69f3
 8002d88:	ffffcfff 	.word	0xffffcfff
 8002d8c:	11fff4ff 	.word	0x11fff4ff
 8002d90:	40013800 	.word	0x40013800
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40004400 	.word	0x40004400
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	08004704 	.word	0x08004704

08002da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	2208      	movs	r2, #8
 8002db2:	4013      	ands	r3, r2
 8002db4:	d00b      	beq.n	8002dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4a4a      	ldr	r2, [pc, #296]	; (8002ee8 <UART_AdvFeatureConfig+0x144>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d00b      	beq.n	8002df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4a43      	ldr	r2, [pc, #268]	; (8002eec <UART_AdvFeatureConfig+0x148>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	2202      	movs	r2, #2
 8002df6:	4013      	ands	r3, r2
 8002df8:	d00b      	beq.n	8002e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a3b      	ldr	r2, [pc, #236]	; (8002ef0 <UART_AdvFeatureConfig+0x14c>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	0019      	movs	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	2204      	movs	r2, #4
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a34      	ldr	r2, [pc, #208]	; (8002ef4 <UART_AdvFeatureConfig+0x150>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	0019      	movs	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	2210      	movs	r2, #16
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d00b      	beq.n	8002e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <UART_AdvFeatureConfig+0x154>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d00b      	beq.n	8002e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	4a25      	ldr	r2, [pc, #148]	; (8002efc <UART_AdvFeatureConfig+0x158>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	2240      	movs	r2, #64	; 0x40
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d01d      	beq.n	8002ebe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <UART_AdvFeatureConfig+0x15c>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	035b      	lsls	r3, r3, #13
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d10b      	bne.n	8002ebe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4a15      	ldr	r2, [pc, #84]	; (8002f04 <UART_AdvFeatureConfig+0x160>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4a0e      	ldr	r2, [pc, #56]	; (8002f08 <UART_AdvFeatureConfig+0x164>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
  }
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	ffff7fff 	.word	0xffff7fff
 8002eec:	fffdffff 	.word	0xfffdffff
 8002ef0:	fffeffff 	.word	0xfffeffff
 8002ef4:	fffbffff 	.word	0xfffbffff
 8002ef8:	ffffefff 	.word	0xffffefff
 8002efc:	ffffdfff 	.word	0xffffdfff
 8002f00:	ffefffff 	.word	0xffefffff
 8002f04:	ff9fffff 	.word	0xff9fffff
 8002f08:	fff7ffff 	.word	0xfff7ffff

08002f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b092      	sub	sp, #72	; 0x48
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2290      	movs	r2, #144	; 0x90
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f1c:	f7fd fe6a 	bl	8000bf4 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d12d      	bne.n	8002f8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	0391      	lsls	r1, r2, #14
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4a47      	ldr	r2, [pc, #284]	; (8003058 <UART_CheckIdleState+0x14c>)
 8002f3c:	9200      	str	r2, [sp, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f000 f88e 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8002f44:	1e03      	subs	r3, r0, #0
 8002f46:	d022      	beq.n	8002f8e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f48:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002f50:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f52:	2301      	movs	r3, #1
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	f383 8810 	msr	PRIMASK, r3
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	438a      	bics	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f74:	f383 8810 	msr	PRIMASK, r3
}
 8002f78:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2288      	movs	r2, #136	; 0x88
 8002f7e:	2120      	movs	r1, #32
 8002f80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2284      	movs	r2, #132	; 0x84
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e060      	b.n	8003050 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2204      	movs	r2, #4
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d146      	bne.n	800302a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	03d1      	lsls	r1, r2, #15
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4a2c      	ldr	r2, [pc, #176]	; (8003058 <UART_CheckIdleState+0x14c>)
 8002fa6:	9200      	str	r2, [sp, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f000 f859 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d03b      	beq.n	800302a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f383 8810 	msr	PRIMASK, r3
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4922      	ldr	r1, [pc, #136]	; (800305c <UART_CheckIdleState+0x150>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f383 8810 	msr	PRIMASK, r3
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe8:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fea:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fec:	633b      	str	r3, [r7, #48]	; 0x30
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f383 8810 	msr	PRIMASK, r3
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2101      	movs	r1, #1
 8003006:	438a      	bics	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	228c      	movs	r2, #140	; 0x8c
 800301a:	2120      	movs	r1, #32
 800301c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2284      	movs	r2, #132	; 0x84
 8003022:	2100      	movs	r1, #0
 8003024:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e012      	b.n	8003050 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2288      	movs	r2, #136	; 0x88
 800302e:	2120      	movs	r1, #32
 8003030:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	228c      	movs	r2, #140	; 0x8c
 8003036:	2120      	movs	r1, #32
 8003038:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2284      	movs	r2, #132	; 0x84
 800304a:	2100      	movs	r1, #0
 800304c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b010      	add	sp, #64	; 0x40
 8003056:	bd80      	pop	{r7, pc}
 8003058:	01ffffff 	.word	0x01ffffff
 800305c:	fffffedf 	.word	0xfffffedf

08003060 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	1dfb      	adds	r3, r7, #7
 800306e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003070:	e051      	b.n	8003116 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	3301      	adds	r3, #1
 8003076:	d04e      	beq.n	8003116 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003078:	f7fd fdbc 	bl	8000bf4 <HAL_GetTick>
 800307c:	0002      	movs	r2, r0
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	429a      	cmp	r2, r3
 8003086:	d302      	bcc.n	800308e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e051      	b.n	8003136 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2204      	movs	r2, #4
 800309a:	4013      	ands	r3, r2
 800309c:	d03b      	beq.n	8003116 <UART_WaitOnFlagUntilTimeout+0xb6>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b80      	cmp	r3, #128	; 0x80
 80030a2:	d038      	beq.n	8003116 <UART_WaitOnFlagUntilTimeout+0xb6>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b40      	cmp	r3, #64	; 0x40
 80030a8:	d035      	beq.n	8003116 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	2208      	movs	r2, #8
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d111      	bne.n	80030dc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2208      	movs	r2, #8
 80030be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 f9a0 	bl	8003408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2290      	movs	r2, #144	; 0x90
 80030cc:	2108      	movs	r1, #8
 80030ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2284      	movs	r2, #132	; 0x84
 80030d4:	2100      	movs	r1, #0
 80030d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e02c      	b.n	8003136 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	401a      	ands	r2, r3
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d112      	bne.n	8003116 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 f983 	bl	8003408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2290      	movs	r2, #144	; 0x90
 8003106:	2120      	movs	r1, #32
 8003108:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2284      	movs	r2, #132	; 0x84
 800310e:	2100      	movs	r1, #0
 8003110:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e00f      	b.n	8003136 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	4013      	ands	r3, r2
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	425a      	negs	r2, r3
 8003126:	4153      	adcs	r3, r2
 8003128:	b2db      	uxtb	r3, r3
 800312a:	001a      	movs	r2, r3
 800312c:	1dfb      	adds	r3, r7, #7
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d09e      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b004      	add	sp, #16
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b098      	sub	sp, #96	; 0x60
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	1dbb      	adds	r3, r7, #6
 800314c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1dba      	adds	r2, r7, #6
 8003158:	215c      	movs	r1, #92	; 0x5c
 800315a:	8812      	ldrh	r2, [r2, #0]
 800315c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1dba      	adds	r2, r7, #6
 8003162:	215e      	movs	r1, #94	; 0x5e
 8003164:	8812      	ldrh	r2, [r2, #0]
 8003166:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	015b      	lsls	r3, r3, #5
 8003176:	429a      	cmp	r2, r3
 8003178:	d10d      	bne.n	8003196 <UART_Start_Receive_IT+0x56>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <UART_Start_Receive_IT+0x4c>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2260      	movs	r2, #96	; 0x60
 8003186:	497b      	ldr	r1, [pc, #492]	; (8003374 <UART_Start_Receive_IT+0x234>)
 8003188:	5299      	strh	r1, [r3, r2]
 800318a:	e02e      	b.n	80031ea <UART_Start_Receive_IT+0xaa>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2260      	movs	r2, #96	; 0x60
 8003190:	21ff      	movs	r1, #255	; 0xff
 8003192:	5299      	strh	r1, [r3, r2]
 8003194:	e029      	b.n	80031ea <UART_Start_Receive_IT+0xaa>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <UART_Start_Receive_IT+0x7a>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <UART_Start_Receive_IT+0x70>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2260      	movs	r2, #96	; 0x60
 80031aa:	21ff      	movs	r1, #255	; 0xff
 80031ac:	5299      	strh	r1, [r3, r2]
 80031ae:	e01c      	b.n	80031ea <UART_Start_Receive_IT+0xaa>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2260      	movs	r2, #96	; 0x60
 80031b4:	217f      	movs	r1, #127	; 0x7f
 80031b6:	5299      	strh	r1, [r3, r2]
 80031b8:	e017      	b.n	80031ea <UART_Start_Receive_IT+0xaa>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	055b      	lsls	r3, r3, #21
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d10d      	bne.n	80031e2 <UART_Start_Receive_IT+0xa2>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <UART_Start_Receive_IT+0x98>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2260      	movs	r2, #96	; 0x60
 80031d2:	217f      	movs	r1, #127	; 0x7f
 80031d4:	5299      	strh	r1, [r3, r2]
 80031d6:	e008      	b.n	80031ea <UART_Start_Receive_IT+0xaa>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2260      	movs	r2, #96	; 0x60
 80031dc:	213f      	movs	r1, #63	; 0x3f
 80031de:	5299      	strh	r1, [r3, r2]
 80031e0:	e003      	b.n	80031ea <UART_Start_Receive_IT+0xaa>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2260      	movs	r2, #96	; 0x60
 80031e6:	2100      	movs	r1, #0
 80031e8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2290      	movs	r2, #144	; 0x90
 80031ee:	2100      	movs	r1, #0
 80031f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	228c      	movs	r2, #140	; 0x8c
 80031f6:	2122      	movs	r1, #34	; 0x22
 80031f8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031fa:	f3ef 8310 	mrs	r3, PRIMASK
 80031fe:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003200:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003202:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003204:	2301      	movs	r3, #1
 8003206:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800320a:	f383 8810 	msr	PRIMASK, r3
}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2101      	movs	r1, #1
 800321c:	430a      	orrs	r2, r1
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003222:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003226:	f383 8810 	msr	PRIMASK, r3
}
 800322a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	059b      	lsls	r3, r3, #22
 8003234:	429a      	cmp	r2, r3
 8003236:	d150      	bne.n	80032da <UART_Start_Receive_IT+0x19a>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2268      	movs	r2, #104	; 0x68
 800323c:	5a9b      	ldrh	r3, [r3, r2]
 800323e:	1dba      	adds	r2, r7, #6
 8003240:	8812      	ldrh	r2, [r2, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d349      	bcc.n	80032da <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	015b      	lsls	r3, r3, #5
 800324e:	429a      	cmp	r2, r3
 8003250:	d107      	bne.n	8003262 <UART_Start_Receive_IT+0x122>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a46      	ldr	r2, [pc, #280]	; (8003378 <UART_Start_Receive_IT+0x238>)
 800325e:	675a      	str	r2, [r3, #116]	; 0x74
 8003260:	e002      	b.n	8003268 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a45      	ldr	r2, [pc, #276]	; (800337c <UART_Start_Receive_IT+0x23c>)
 8003266:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d019      	beq.n	80032a4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003270:	f3ef 8310 	mrs	r3, PRIMASK
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003278:	65bb      	str	r3, [r7, #88]	; 0x58
 800327a:	2301      	movs	r3, #1
 800327c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	f383 8810 	msr	PRIMASK, r3
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	0049      	lsls	r1, r1, #1
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800329a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329e:	f383 8810 	msr	PRIMASK, r3
}
 80032a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80032ac:	657b      	str	r3, [r7, #84]	; 0x54
 80032ae:	2301      	movs	r3, #1
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b4:	f383 8810 	msr	PRIMASK, r3
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2180      	movs	r1, #128	; 0x80
 80032c6:	0549      	lsls	r1, r1, #21
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ce:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	f383 8810 	msr	PRIMASK, r3
}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	e047      	b.n	800336a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	015b      	lsls	r3, r3, #5
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d107      	bne.n	80032f6 <UART_Start_Receive_IT+0x1b6>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a23      	ldr	r2, [pc, #140]	; (8003380 <UART_Start_Receive_IT+0x240>)
 80032f2:	675a      	str	r2, [r3, #116]	; 0x74
 80032f4:	e002      	b.n	80032fc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4a22      	ldr	r2, [pc, #136]	; (8003384 <UART_Start_Receive_IT+0x244>)
 80032fa:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d019      	beq.n	8003338 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003304:	f3ef 8310 	mrs	r3, PRIMASK
 8003308:	61fb      	str	r3, [r7, #28]
  return(result);
 800330a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800330c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800330e:	2301      	movs	r3, #1
 8003310:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	f383 8810 	msr	PRIMASK, r3
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2190      	movs	r1, #144	; 0x90
 8003326:	0049      	lsls	r1, r1, #1
 8003328:	430a      	orrs	r2, r1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	f383 8810 	msr	PRIMASK, r3
}
 8003336:	e018      	b.n	800336a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003338:	f3ef 8310 	mrs	r3, PRIMASK
 800333c:	613b      	str	r3, [r7, #16]
  return(result);
 800333e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003340:	653b      	str	r3, [r7, #80]	; 0x50
 8003342:	2301      	movs	r3, #1
 8003344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f383 8810 	msr	PRIMASK, r3
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2120      	movs	r1, #32
 800335a:	430a      	orrs	r2, r1
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003360:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	0018      	movs	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	b018      	add	sp, #96	; 0x60
 8003372:	bd80      	pop	{r7, pc}
 8003374:	000001ff 	.word	0x000001ff
 8003378:	08004089 	.word	0x08004089
 800337c:	08003d59 	.word	0x08003d59
 8003380:	08003ba1 	.word	0x08003ba1
 8003384:	080039e9 	.word	0x080039e9

08003388 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003390:	f3ef 8310 	mrs	r3, PRIMASK
 8003394:	60bb      	str	r3, [r7, #8]
  return(result);
 8003396:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	2301      	movs	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f383 8810 	msr	PRIMASK, r3
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	21c0      	movs	r1, #192	; 0xc0
 80033b2:	438a      	bics	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f383 8810 	msr	PRIMASK, r3
}
 80033c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c2:	f3ef 8310 	mrs	r3, PRIMASK
 80033c6:	617b      	str	r3, [r7, #20]
  return(result);
 80033c8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	2301      	movs	r3, #1
 80033ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <UART_EndTxTransfer+0x7c>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f383 8810 	msr	PRIMASK, r3
}
 80033f2:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2288      	movs	r2, #136	; 0x88
 80033f8:	2120      	movs	r1, #32
 80033fa:	5099      	str	r1, [r3, r2]
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b00a      	add	sp, #40	; 0x28
 8003402:	bd80      	pop	{r7, pc}
 8003404:	ff7fffff 	.word	0xff7fffff

08003408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08e      	sub	sp, #56	; 0x38
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003410:	f3ef 8310 	mrs	r3, PRIMASK
 8003414:	617b      	str	r3, [r7, #20]
  return(result);
 8003416:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
 800341a:	2301      	movs	r3, #1
 800341c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	f383 8810 	msr	PRIMASK, r3
}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4926      	ldr	r1, [pc, #152]	; (80034cc <UART_EndRxTransfer+0xc4>)
 8003432:	400a      	ands	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f383 8810 	msr	PRIMASK, r3
}
 8003440:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003442:	f3ef 8310 	mrs	r3, PRIMASK
 8003446:	623b      	str	r3, [r7, #32]
  return(result);
 8003448:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800344a:	633b      	str	r3, [r7, #48]	; 0x30
 800344c:	2301      	movs	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	f383 8810 	msr	PRIMASK, r3
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	491b      	ldr	r1, [pc, #108]	; (80034d0 <UART_EndRxTransfer+0xc8>)
 8003464:	400a      	ands	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d118      	bne.n	80034ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347c:	f3ef 8310 	mrs	r3, PRIMASK
 8003480:	60bb      	str	r3, [r7, #8]
  return(result);
 8003482:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003486:	2301      	movs	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f383 8810 	msr	PRIMASK, r3
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2110      	movs	r1, #16
 800349e:	438a      	bics	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f383 8810 	msr	PRIMASK, r3
}
 80034ac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	228c      	movs	r2, #140	; 0x8c
 80034b2:	2120      	movs	r1, #32
 80034b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b00e      	add	sp, #56	; 0x38
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	fffffedf 	.word	0xfffffedf
 80034d0:	effffffe 	.word	0xeffffffe

080034d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2220      	movs	r2, #32
 80034ea:	4013      	ands	r3, r2
 80034ec:	d135      	bne.n	800355a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	2256      	movs	r2, #86	; 0x56
 80034f2:	2100      	movs	r1, #0
 80034f4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f6:	f3ef 8310 	mrs	r3, PRIMASK
 80034fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80034fc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003500:	2301      	movs	r3, #1
 8003502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f383 8810 	msr	PRIMASK, r3
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2180      	movs	r1, #128	; 0x80
 8003518:	438a      	bics	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f383 8810 	msr	PRIMASK, r3
}
 8003526:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	61bb      	str	r3, [r7, #24]
  return(result);
 800352e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
 8003532:	2301      	movs	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2140      	movs	r1, #64	; 0x40
 800354a:	430a      	orrs	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	e004      	b.n	8003564 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	0018      	movs	r0, r3
 800355e:	f7fc ffaf 	bl	80004c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b00c      	add	sp, #48	; 0x30
 800356a:	bd80      	pop	{r7, pc}

0800356c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	0018      	movs	r0, r3
 800357e:	f7ff fa8b 	bl	8002a98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	b004      	add	sp, #16
 8003588:	bd80      	pop	{r7, pc}

0800358a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2288      	movs	r2, #136	; 0x88
 800359c:	589b      	ldr	r3, [r3, r2]
 800359e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	228c      	movs	r2, #140	; 0x8c
 80035a4:	589b      	ldr	r3, [r3, r2]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b80      	cmp	r3, #128	; 0x80
 80035b4:	d10a      	bne.n	80035cc <UART_DMAError+0x42>
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b21      	cmp	r3, #33	; 0x21
 80035ba:	d107      	bne.n	80035cc <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2256      	movs	r2, #86	; 0x56
 80035c0:	2100      	movs	r1, #0
 80035c2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f7ff fede 	bl	8003388 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d10a      	bne.n	80035f0 <UART_DMAError+0x66>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b22      	cmp	r3, #34	; 0x22
 80035de:	d107      	bne.n	80035f0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	225e      	movs	r2, #94	; 0x5e
 80035e4:	2100      	movs	r1, #0
 80035e6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7ff ff0c 	bl	8003408 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2290      	movs	r2, #144	; 0x90
 80035f4:	589b      	ldr	r3, [r3, r2]
 80035f6:	2210      	movs	r2, #16
 80035f8:	431a      	orrs	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2190      	movs	r1, #144	; 0x90
 80035fe:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	0018      	movs	r0, r3
 8003604:	f7ff fa50 	bl	8002aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b006      	add	sp, #24
 800360e:	bd80      	pop	{r7, pc}

08003610 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	225e      	movs	r2, #94	; 0x5e
 8003622:	2100      	movs	r1, #0
 8003624:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2256      	movs	r2, #86	; 0x56
 800362a:	2100      	movs	r1, #0
 800362c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	0018      	movs	r0, r3
 8003632:	f7ff fa39 	bl	8002aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bd80      	pop	{r7, pc}

0800363e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b08a      	sub	sp, #40	; 0x28
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2288      	movs	r2, #136	; 0x88
 800364a:	589b      	ldr	r3, [r3, r2]
 800364c:	2b21      	cmp	r3, #33	; 0x21
 800364e:	d14c      	bne.n	80036ea <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2256      	movs	r2, #86	; 0x56
 8003654:	5a9b      	ldrh	r3, [r3, r2]
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d132      	bne.n	80036c2 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365c:	f3ef 8310 	mrs	r3, PRIMASK
 8003660:	60bb      	str	r3, [r7, #8]
  return(result);
 8003662:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	2301      	movs	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f383 8810 	msr	PRIMASK, r3
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	438a      	bics	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f383 8810 	msr	PRIMASK, r3
}
 800368c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800368e:	f3ef 8310 	mrs	r3, PRIMASK
 8003692:	617b      	str	r3, [r7, #20]
  return(result);
 8003694:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003696:	623b      	str	r3, [r7, #32]
 8003698:	2301      	movs	r3, #1
 800369a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2140      	movs	r1, #64	; 0x40
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f383 8810 	msr	PRIMASK, r3
}
 80036be:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80036c0:	e013      	b.n	80036ea <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2256      	movs	r2, #86	; 0x56
 80036dc:	5a9b      	ldrh	r3, [r3, r2]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b299      	uxth	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2256      	movs	r2, #86	; 0x56
 80036e8:	5299      	strh	r1, [r3, r2]
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b00a      	add	sp, #40	; 0x28
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b08c      	sub	sp, #48	; 0x30
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2288      	movs	r2, #136	; 0x88
 80036fe:	589b      	ldr	r3, [r3, r2]
 8003700:	2b21      	cmp	r3, #33	; 0x21
 8003702:	d151      	bne.n	80037a8 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2256      	movs	r2, #86	; 0x56
 8003708:	5a9b      	ldrh	r3, [r3, r2]
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d132      	bne.n	8003776 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003710:	f3ef 8310 	mrs	r3, PRIMASK
 8003714:	60fb      	str	r3, [r7, #12]
  return(result);
 8003716:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003718:	62bb      	str	r3, [r7, #40]	; 0x28
 800371a:	2301      	movs	r3, #1
 800371c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f383 8810 	msr	PRIMASK, r3
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2180      	movs	r1, #128	; 0x80
 8003732:	438a      	bics	r2, r1
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f383 8810 	msr	PRIMASK, r3
}
 8003740:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003742:	f3ef 8310 	mrs	r3, PRIMASK
 8003746:	61bb      	str	r3, [r7, #24]
  return(result);
 8003748:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
 800374c:	2301      	movs	r3, #1
 800374e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f383 8810 	msr	PRIMASK, r3
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	f383 8810 	msr	PRIMASK, r3
}
 8003772:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003774:	e018      	b.n	80037a8 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	001a      	movs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	05d2      	lsls	r2, r2, #23
 8003788:	0dd2      	lsrs	r2, r2, #23
 800378a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	1c9a      	adds	r2, r3, #2
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2256      	movs	r2, #86	; 0x56
 800379a:	5a9b      	ldrh	r3, [r3, r2]
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b299      	uxth	r1, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2256      	movs	r2, #86	; 0x56
 80037a6:	5299      	strh	r1, [r3, r2]
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b00c      	add	sp, #48	; 0x30
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2288      	movs	r2, #136	; 0x88
 80037bc:	589b      	ldr	r3, [r3, r2]
 80037be:	2b21      	cmp	r3, #33	; 0x21
 80037c0:	d165      	bne.n	800388e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80037c2:	232e      	movs	r3, #46	; 0x2e
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	216a      	movs	r1, #106	; 0x6a
 80037ca:	5a52      	ldrh	r2, [r2, r1]
 80037cc:	801a      	strh	r2, [r3, #0]
 80037ce:	e059      	b.n	8003884 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2256      	movs	r2, #86	; 0x56
 80037d4:	5a9b      	ldrh	r3, [r3, r2]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d133      	bne.n	8003844 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037dc:	f3ef 8310 	mrs	r3, PRIMASK
 80037e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80037e2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80037e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e6:	2301      	movs	r3, #1
 80037e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f383 8810 	msr	PRIMASK, r3
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4926      	ldr	r1, [pc, #152]	; (8003898 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80037fe:	400a      	ands	r2, r1
 8003800:	609a      	str	r2, [r3, #8]
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f383 8810 	msr	PRIMASK, r3
}
 800380c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380e:	f3ef 8310 	mrs	r3, PRIMASK
 8003812:	61bb      	str	r3, [r7, #24]
  return(result);
 8003814:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
 8003818:	2301      	movs	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f383 8810 	msr	PRIMASK, r3
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2140      	movs	r1, #64	; 0x40
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f383 8810 	msr	PRIMASK, r3
}
 800383e:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003840:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003842:	e024      	b.n	800388e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	2280      	movs	r2, #128	; 0x80
 800384c:	4013      	ands	r3, r2
 800384e:	d013      	beq.n	8003878 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2256      	movs	r2, #86	; 0x56
 800386a:	5a9b      	ldrh	r3, [r3, r2]
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b299      	uxth	r1, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2256      	movs	r2, #86	; 0x56
 8003876:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003878:	212e      	movs	r1, #46	; 0x2e
 800387a:	187b      	adds	r3, r7, r1
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	187b      	adds	r3, r7, r1
 8003880:	3a01      	subs	r2, #1
 8003882:	801a      	strh	r2, [r3, #0]
 8003884:	232e      	movs	r3, #46	; 0x2e
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1a0      	bne.n	80037d0 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b00c      	add	sp, #48	; 0x30
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	ff7fffff 	.word	0xff7fffff

0800389c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	; 0x30
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2288      	movs	r2, #136	; 0x88
 80038a8:	589b      	ldr	r3, [r3, r2]
 80038aa:	2b21      	cmp	r3, #33	; 0x21
 80038ac:	d16a      	bne.n	8003984 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80038ae:	232e      	movs	r3, #46	; 0x2e
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	216a      	movs	r1, #106	; 0x6a
 80038b6:	5a52      	ldrh	r2, [r2, r1]
 80038b8:	801a      	strh	r2, [r3, #0]
 80038ba:	e05e      	b.n	800397a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2256      	movs	r2, #86	; 0x56
 80038c0:	5a9b      	ldrh	r3, [r3, r2]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d133      	bne.n	8003930 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c8:	f3ef 8310 	mrs	r3, PRIMASK
 80038cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80038ce:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	2301      	movs	r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f383 8810 	msr	PRIMASK, r3
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4928      	ldr	r1, [pc, #160]	; (800398c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80038ea:	400a      	ands	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f383 8810 	msr	PRIMASK, r3
}
 80038f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fa:	f3ef 8310 	mrs	r3, PRIMASK
 80038fe:	617b      	str	r3, [r7, #20]
  return(result);
 8003900:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003902:	623b      	str	r3, [r7, #32]
 8003904:	2301      	movs	r3, #1
 8003906:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2140      	movs	r1, #64	; 0x40
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f383 8810 	msr	PRIMASK, r3
}
 800392a:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800392c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800392e:	e029      	b.n	8003984 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	4013      	ands	r3, r2
 800393a:	d018      	beq.n	800396e <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	001a      	movs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	05d2      	lsls	r2, r2, #23
 800394e:	0dd2      	lsrs	r2, r2, #23
 8003950:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	1c9a      	adds	r2, r3, #2
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2256      	movs	r2, #86	; 0x56
 8003960:	5a9b      	ldrh	r3, [r3, r2]
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b299      	uxth	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2256      	movs	r2, #86	; 0x56
 800396c:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800396e:	212e      	movs	r1, #46	; 0x2e
 8003970:	187b      	adds	r3, r7, r1
 8003972:	881a      	ldrh	r2, [r3, #0]
 8003974:	187b      	adds	r3, r7, r1
 8003976:	3a01      	subs	r2, #1
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	232e      	movs	r3, #46	; 0x2e
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d19b      	bne.n	80038bc <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b00c      	add	sp, #48	; 0x30
 800398a:	bd80      	pop	{r7, pc}
 800398c:	ff7fffff 	.word	0xff7fffff

08003990 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003998:	f3ef 8310 	mrs	r3, PRIMASK
 800399c:	60bb      	str	r3, [r7, #8]
  return(result);
 800399e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	2301      	movs	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f383 8810 	msr	PRIMASK, r3
}
 80039ac:	46c0      	nop			; (mov r8, r8)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2140      	movs	r1, #64	; 0x40
 80039ba:	438a      	bics	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f383 8810 	msr	PRIMASK, r3
}
 80039c8:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2288      	movs	r2, #136	; 0x88
 80039ce:	2120      	movs	r1, #32
 80039d0:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	0018      	movs	r0, r3
 80039dc:	f7fc fd70 	bl	80004c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b006      	add	sp, #24
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b094      	sub	sp, #80	; 0x50
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80039f0:	204e      	movs	r0, #78	; 0x4e
 80039f2:	183b      	adds	r3, r7, r0
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	2160      	movs	r1, #96	; 0x60
 80039f8:	5a52      	ldrh	r2, [r2, r1]
 80039fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	228c      	movs	r2, #140	; 0x8c
 8003a00:	589b      	ldr	r3, [r3, r2]
 8003a02:	2b22      	cmp	r3, #34	; 0x22
 8003a04:	d000      	beq.n	8003a08 <UART_RxISR_8BIT+0x20>
 8003a06:	e0ba      	b.n	8003b7e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a0e:	214c      	movs	r1, #76	; 0x4c
 8003a10:	187b      	adds	r3, r7, r1
 8003a12:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	183b      	adds	r3, r7, r0
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	b2d9      	uxtb	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	400a      	ands	r2, r1
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	225e      	movs	r2, #94	; 0x5e
 8003a38:	5a9b      	ldrh	r3, [r3, r2]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b299      	uxth	r1, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	225e      	movs	r2, #94	; 0x5e
 8003a44:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	225e      	movs	r2, #94	; 0x5e
 8003a4a:	5a9b      	ldrh	r3, [r3, r2]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d000      	beq.n	8003a54 <UART_RxISR_8BIT+0x6c>
 8003a52:	e09c      	b.n	8003b8e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a54:	f3ef 8310 	mrs	r3, PRIMASK
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a5e:	2301      	movs	r3, #1
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4948      	ldr	r1, [pc, #288]	; (8003b98 <UART_RxISR_8BIT+0x1b0>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a86:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a90:	2301      	movs	r3, #1
 8003a92:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a96:	f383 8810 	msr	PRIMASK, r3
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	228c      	movs	r2, #140	; 0x8c
 8003abc:	2120      	movs	r1, #32
 8003abe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d018      	beq.n	8003b0c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ada:	f3ef 8310 	mrs	r3, PRIMASK
 8003ade:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ae0:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f383 8810 	msr	PRIMASK, r3
}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4928      	ldr	r1, [pc, #160]	; (8003b9c <UART_RxISR_8BIT+0x1b4>)
 8003afc:	400a      	ands	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	f383 8810 	msr	PRIMASK, r3
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d12f      	bne.n	8003b74 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b20:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b24:	2301      	movs	r3, #1
 8003b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f383 8810 	msr	PRIMASK, r3
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2110      	movs	r1, #16
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f383 8810 	msr	PRIMASK, r3
}
 8003b4a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	2210      	movs	r2, #16
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d103      	bne.n	8003b62 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2210      	movs	r2, #16
 8003b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	225c      	movs	r2, #92	; 0x5c
 8003b66:	5a9a      	ldrh	r2, [r3, r2]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	0011      	movs	r1, r2
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7fe ffa3 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b72:	e00c      	b.n	8003b8e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7fc fc38 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003b7c:	e007      	b.n	8003b8e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2108      	movs	r1, #8
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	619a      	str	r2, [r3, #24]
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b014      	add	sp, #80	; 0x50
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	fffffedf 	.word	0xfffffedf
 8003b9c:	fbffffff 	.word	0xfbffffff

08003ba0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b094      	sub	sp, #80	; 0x50
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ba8:	204e      	movs	r0, #78	; 0x4e
 8003baa:	183b      	adds	r3, r7, r0
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	2160      	movs	r1, #96	; 0x60
 8003bb0:	5a52      	ldrh	r2, [r2, r1]
 8003bb2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	228c      	movs	r2, #140	; 0x8c
 8003bb8:	589b      	ldr	r3, [r3, r2]
 8003bba:	2b22      	cmp	r3, #34	; 0x22
 8003bbc:	d000      	beq.n	8003bc0 <UART_RxISR_16BIT+0x20>
 8003bbe:	e0ba      	b.n	8003d36 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc6:	214c      	movs	r1, #76	; 0x4c
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	183a      	adds	r2, r7, r0
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be6:	1c9a      	adds	r2, r3, #2
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	225e      	movs	r2, #94	; 0x5e
 8003bf0:	5a9b      	ldrh	r3, [r3, r2]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b299      	uxth	r1, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	225e      	movs	r2, #94	; 0x5e
 8003bfc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	225e      	movs	r2, #94	; 0x5e
 8003c02:	5a9b      	ldrh	r3, [r3, r2]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d000      	beq.n	8003c0c <UART_RxISR_16BIT+0x6c>
 8003c0a:	e09c      	b.n	8003d46 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c10:	623b      	str	r3, [r7, #32]
  return(result);
 8003c12:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
 8003c16:	2301      	movs	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	f383 8810 	msr	PRIMASK, r3
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4948      	ldr	r1, [pc, #288]	; (8003d50 <UART_RxISR_16BIT+0x1b0>)
 8003c2e:	400a      	ands	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	f383 8810 	msr	PRIMASK, r3
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	643b      	str	r3, [r7, #64]	; 0x40
 8003c48:	2301      	movs	r3, #1
 8003c4a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	438a      	bics	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	228c      	movs	r2, #140	; 0x8c
 8003c74:	2120      	movs	r1, #32
 8003c76:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d018      	beq.n	8003cc4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c92:	f3ef 8310 	mrs	r3, PRIMASK
 8003c96:	617b      	str	r3, [r7, #20]
  return(result);
 8003c98:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f383 8810 	msr	PRIMASK, r3
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4928      	ldr	r1, [pc, #160]	; (8003d54 <UART_RxISR_16BIT+0x1b4>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f383 8810 	msr	PRIMASK, r3
}
 8003cc2:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d12f      	bne.n	8003d2c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cd8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cdc:	2301      	movs	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f383 8810 	msr	PRIMASK, r3
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2110      	movs	r1, #16
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f383 8810 	msr	PRIMASK, r3
}
 8003d02:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d103      	bne.n	8003d1a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2210      	movs	r2, #16
 8003d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	225c      	movs	r2, #92	; 0x5c
 8003d1e:	5a9a      	ldrh	r2, [r3, r2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	0011      	movs	r1, r2
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7fe fec7 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d2a:	e00c      	b.n	8003d46 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7fc fb5c 	bl	80003ec <HAL_UART_RxCpltCallback>
}
 8003d34:	e007      	b.n	8003d46 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2108      	movs	r1, #8
 8003d42:	430a      	orrs	r2, r1
 8003d44:	619a      	str	r2, [r3, #24]
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b014      	add	sp, #80	; 0x50
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	fffffedf 	.word	0xfffffedf
 8003d54:	fbffffff 	.word	0xfbffffff

08003d58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b0a0      	sub	sp, #128	; 0x80
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003d60:	237a      	movs	r3, #122	; 0x7a
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	2160      	movs	r1, #96	; 0x60
 8003d68:	5a52      	ldrh	r2, [r2, r1]
 8003d6a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	228c      	movs	r2, #140	; 0x8c
 8003d88:	589b      	ldr	r3, [r3, r2]
 8003d8a:	2b22      	cmp	r3, #34	; 0x22
 8003d8c:	d000      	beq.n	8003d90 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003d8e:	e165      	b.n	800405c <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003d90:	236e      	movs	r3, #110	; 0x6e
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	2168      	movs	r1, #104	; 0x68
 8003d98:	5a52      	ldrh	r2, [r2, r1]
 8003d9a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003d9c:	e10c      	b.n	8003fb8 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da4:	216c      	movs	r1, #108	; 0x6c
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	237a      	movs	r3, #122	; 0x7a
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b2d9      	uxtb	r1, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	225e      	movs	r2, #94	; 0x5e
 8003dd0:	5a9b      	ldrh	r3, [r3, r2]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b299      	uxth	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	225e      	movs	r2, #94	; 0x5e
 8003ddc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003de6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003de8:	2207      	movs	r2, #7
 8003dea:	4013      	ands	r3, r2
 8003dec:	d049      	beq.n	8003e82 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003df0:	2201      	movs	r2, #1
 8003df2:	4013      	ands	r3, r2
 8003df4:	d010      	beq.n	8003e18 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003df6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2201      	movs	r2, #1
 8003e06:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2290      	movs	r2, #144	; 0x90
 8003e0c:	589b      	ldr	r3, [r3, r2]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2190      	movs	r1, #144	; 0x90
 8003e16:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d00f      	beq.n	8003e40 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003e20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e22:	2201      	movs	r2, #1
 8003e24:	4013      	ands	r3, r2
 8003e26:	d00b      	beq.n	8003e40 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2290      	movs	r2, #144	; 0x90
 8003e34:	589b      	ldr	r3, [r3, r2]
 8003e36:	2204      	movs	r2, #4
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2190      	movs	r1, #144	; 0x90
 8003e3e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e42:	2204      	movs	r2, #4
 8003e44:	4013      	ands	r3, r2
 8003e46:	d00f      	beq.n	8003e68 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2204      	movs	r2, #4
 8003e56:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2290      	movs	r2, #144	; 0x90
 8003e5c:	589b      	ldr	r3, [r3, r2]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2190      	movs	r1, #144	; 0x90
 8003e66:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2290      	movs	r2, #144	; 0x90
 8003e6c:	589b      	ldr	r3, [r3, r2]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7fe fe17 	bl	8002aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2290      	movs	r2, #144	; 0x90
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	225e      	movs	r2, #94	; 0x5e
 8003e86:	5a9b      	ldrh	r3, [r3, r2]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d000      	beq.n	8003e90 <UART_RxISR_8BIT_FIFOEN+0x138>
 8003e8e:	e093      	b.n	8003fb8 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e90:	f3ef 8310 	mrs	r3, PRIMASK
 8003e94:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e98:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea0:	f383 8810 	msr	PRIMASK, r3
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4970      	ldr	r1, [pc, #448]	; (8004074 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 8003eb2:	400a      	ands	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec6:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8003ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003eca:	667b      	str	r3, [r7, #100]	; 0x64
 8003ecc:	2301      	movs	r3, #1
 8003ece:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4965      	ldr	r1, [pc, #404]	; (8004078 <UART_RxISR_8BIT_FIFOEN+0x320>)
 8003ee4:	400a      	ands	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	228c      	movs	r2, #140	; 0x8c
 8003ef8:	2120      	movs	r1, #32
 8003efa:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	041b      	lsls	r3, r3, #16
 8003f12:	4013      	ands	r3, r2
 8003f14:	d018      	beq.n	8003f48 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f16:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f20:	2301      	movs	r3, #1
 8003f22:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	f383 8810 	msr	PRIMASK, r3
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4951      	ldr	r1, [pc, #324]	; (800407c <UART_RxISR_8BIT_FIFOEN+0x324>)
 8003f38:	400a      	ands	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f3e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	f383 8810 	msr	PRIMASK, r3
}
 8003f46:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d12f      	bne.n	8003fb0 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f56:	f3ef 8310 	mrs	r3, PRIMASK
 8003f5a:	623b      	str	r3, [r7, #32]
  return(result);
 8003f5c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f60:	2301      	movs	r3, #1
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	f383 8810 	msr	PRIMASK, r3
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2110      	movs	r1, #16
 8003f78:	438a      	bics	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	f383 8810 	msr	PRIMASK, r3
}
 8003f86:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b10      	cmp	r3, #16
 8003f94:	d103      	bne.n	8003f9e <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2210      	movs	r2, #16
 8003f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	225c      	movs	r2, #92	; 0x5c
 8003fa2:	5a9a      	ldrh	r2, [r3, r2]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	0011      	movs	r1, r2
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7fe fd85 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
 8003fae:	e003      	b.n	8003fb8 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7fc fa1a 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003fb8:	236e      	movs	r3, #110	; 0x6e
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <UART_RxISR_8BIT_FIFOEN+0x274>
 8003fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d000      	beq.n	8003fcc <UART_RxISR_8BIT_FIFOEN+0x274>
 8003fca:	e6e8      	b.n	8003d9e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003fcc:	205a      	movs	r0, #90	; 0x5a
 8003fce:	183b      	adds	r3, r7, r0
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	215e      	movs	r1, #94	; 0x5e
 8003fd4:	5a52      	ldrh	r2, [r2, r1]
 8003fd6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003fd8:	0001      	movs	r1, r0
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d044      	beq.n	800406c <UART_RxISR_8BIT_FIFOEN+0x314>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2268      	movs	r2, #104	; 0x68
 8003fe6:	5a9b      	ldrh	r3, [r3, r2]
 8003fe8:	187a      	adds	r2, r7, r1
 8003fea:	8812      	ldrh	r2, [r2, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d23d      	bcs.n	800406c <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f383 8810 	msr	PRIMASK, r3
}
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	491b      	ldr	r1, [pc, #108]	; (8004080 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8004012:	400a      	ands	r2, r1
 8004014:	609a      	str	r2, [r3, #8]
 8004016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004018:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f383 8810 	msr	PRIMASK, r3
}
 8004020:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a17      	ldr	r2, [pc, #92]	; (8004084 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8004026:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004028:	f3ef 8310 	mrs	r3, PRIMASK
 800402c:	617b      	str	r3, [r7, #20]
  return(result);
 800402e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004030:	653b      	str	r3, [r7, #80]	; 0x50
 8004032:	2301      	movs	r3, #1
 8004034:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f383 8810 	msr	PRIMASK, r3
}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2120      	movs	r1, #32
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004050:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800405a:	e007      	b.n	800406c <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2108      	movs	r1, #8
 8004068:	430a      	orrs	r2, r1
 800406a:	619a      	str	r2, [r3, #24]
}
 800406c:	46c0      	nop			; (mov r8, r8)
 800406e:	46bd      	mov	sp, r7
 8004070:	b020      	add	sp, #128	; 0x80
 8004072:	bd80      	pop	{r7, pc}
 8004074:	fffffeff 	.word	0xfffffeff
 8004078:	effffffe 	.word	0xeffffffe
 800407c:	fbffffff 	.word	0xfbffffff
 8004080:	efffffff 	.word	0xefffffff
 8004084:	080039e9 	.word	0x080039e9

08004088 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b0a2      	sub	sp, #136	; 0x88
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004090:	2382      	movs	r3, #130	; 0x82
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	2160      	movs	r1, #96	; 0x60
 8004098:	5a52      	ldrh	r2, [r2, r1]
 800409a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	2284      	movs	r2, #132	; 0x84
 80040a4:	18ba      	adds	r2, r7, r2
 80040a6:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	228c      	movs	r2, #140	; 0x8c
 80040bc:	589b      	ldr	r3, [r3, r2]
 80040be:	2b22      	cmp	r3, #34	; 0x22
 80040c0:	d000      	beq.n	80040c4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80040c2:	e16f      	b.n	80043a4 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80040c4:	2376      	movs	r3, #118	; 0x76
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	2168      	movs	r1, #104	; 0x68
 80040cc:	5a52      	ldrh	r2, [r2, r1]
 80040ce:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80040d0:	e114      	b.n	80042fc <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d8:	2174      	movs	r1, #116	; 0x74
 80040da:	187b      	adds	r3, r7, r1
 80040dc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80040e4:	187b      	adds	r3, r7, r1
 80040e6:	2282      	movs	r2, #130	; 0x82
 80040e8:	18ba      	adds	r2, r7, r2
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	8812      	ldrh	r2, [r2, #0]
 80040ee:	4013      	ands	r3, r2
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	1c9a      	adds	r2, r3, #2
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	225e      	movs	r2, #94	; 0x5e
 8004104:	5a9b      	ldrh	r3, [r3, r2]
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b299      	uxth	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	225e      	movs	r2, #94	; 0x5e
 8004110:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	2184      	movs	r1, #132	; 0x84
 800411a:	187a      	adds	r2, r7, r1
 800411c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800411e:	187b      	adds	r3, r7, r1
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2207      	movs	r2, #7
 8004124:	4013      	ands	r3, r2
 8004126:	d04e      	beq.n	80041c6 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004128:	187b      	adds	r3, r7, r1
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2201      	movs	r2, #1
 800412e:	4013      	ands	r3, r2
 8004130:	d010      	beq.n	8004154 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8004132:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4013      	ands	r3, r2
 800413a:	d00b      	beq.n	8004154 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2201      	movs	r2, #1
 8004142:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2290      	movs	r2, #144	; 0x90
 8004148:	589b      	ldr	r3, [r3, r2]
 800414a:	2201      	movs	r2, #1
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2190      	movs	r1, #144	; 0x90
 8004152:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004154:	2384      	movs	r3, #132	; 0x84
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2202      	movs	r2, #2
 800415c:	4013      	ands	r3, r2
 800415e:	d00f      	beq.n	8004180 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004162:	2201      	movs	r2, #1
 8004164:	4013      	ands	r3, r2
 8004166:	d00b      	beq.n	8004180 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2202      	movs	r2, #2
 800416e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2290      	movs	r2, #144	; 0x90
 8004174:	589b      	ldr	r3, [r3, r2]
 8004176:	2204      	movs	r2, #4
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2190      	movs	r1, #144	; 0x90
 800417e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004180:	2384      	movs	r3, #132	; 0x84
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2204      	movs	r2, #4
 8004188:	4013      	ands	r3, r2
 800418a:	d00f      	beq.n	80041ac <UART_RxISR_16BIT_FIFOEN+0x124>
 800418c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418e:	2201      	movs	r2, #1
 8004190:	4013      	ands	r3, r2
 8004192:	d00b      	beq.n	80041ac <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2204      	movs	r2, #4
 800419a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2290      	movs	r2, #144	; 0x90
 80041a0:	589b      	ldr	r3, [r3, r2]
 80041a2:	2202      	movs	r2, #2
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2190      	movs	r1, #144	; 0x90
 80041aa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2290      	movs	r2, #144	; 0x90
 80041b0:	589b      	ldr	r3, [r3, r2]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	0018      	movs	r0, r3
 80041ba:	f7fe fc75 	bl	8002aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2290      	movs	r2, #144	; 0x90
 80041c2:	2100      	movs	r1, #0
 80041c4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	225e      	movs	r2, #94	; 0x5e
 80041ca:	5a9b      	ldrh	r3, [r3, r2]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d000      	beq.n	80041d4 <UART_RxISR_16BIT_FIFOEN+0x14c>
 80041d2:	e093      	b.n	80042fc <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d4:	f3ef 8310 	mrs	r3, PRIMASK
 80041d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80041da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041de:	2301      	movs	r3, #1
 80041e0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e4:	f383 8810 	msr	PRIMASK, r3
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4971      	ldr	r1, [pc, #452]	; (80043bc <UART_RxISR_16BIT_FIFOEN+0x334>)
 80041f6:	400a      	ands	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004200:	f383 8810 	msr	PRIMASK, r3
}
 8004204:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004206:	f3ef 8310 	mrs	r3, PRIMASK
 800420a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800420c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800420e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004210:	2301      	movs	r3, #1
 8004212:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004216:	f383 8810 	msr	PRIMASK, r3
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4966      	ldr	r1, [pc, #408]	; (80043c0 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8004228:	400a      	ands	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800422e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004232:	f383 8810 	msr	PRIMASK, r3
}
 8004236:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	228c      	movs	r2, #140	; 0x8c
 800423c:	2120      	movs	r1, #32
 800423e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	4013      	ands	r3, r2
 8004258:	d018      	beq.n	800428c <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425a:	f3ef 8310 	mrs	r3, PRIMASK
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004262:	667b      	str	r3, [r7, #100]	; 0x64
 8004264:	2301      	movs	r3, #1
 8004266:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426a:	f383 8810 	msr	PRIMASK, r3
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4952      	ldr	r1, [pc, #328]	; (80043c4 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 800427c:	400a      	ands	r2, r1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004282:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	f383 8810 	msr	PRIMASK, r3
}
 800428a:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d12f      	bne.n	80042f4 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429a:	f3ef 8310 	mrs	r3, PRIMASK
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a2:	663b      	str	r3, [r7, #96]	; 0x60
 80042a4:	2301      	movs	r3, #1
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	f383 8810 	msr	PRIMASK, r3
}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2110      	movs	r1, #16
 80042bc:	438a      	bics	r2, r1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	f383 8810 	msr	PRIMASK, r3
}
 80042ca:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	2210      	movs	r2, #16
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d103      	bne.n	80042e2 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2210      	movs	r2, #16
 80042e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	225c      	movs	r2, #92	; 0x5c
 80042e6:	5a9a      	ldrh	r2, [r3, r2]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	0011      	movs	r1, r2
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7fe fbe3 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
 80042f2:	e003      	b.n	80042fc <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	0018      	movs	r0, r3
 80042f8:	f7fc f878 	bl	80003ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042fc:	2376      	movs	r3, #118	; 0x76
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8004306:	2384      	movs	r3, #132	; 0x84
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2220      	movs	r2, #32
 800430e:	4013      	ands	r3, r2
 8004310:	d000      	beq.n	8004314 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8004312:	e6de      	b.n	80040d2 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004314:	205e      	movs	r0, #94	; 0x5e
 8004316:	183b      	adds	r3, r7, r0
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	215e      	movs	r1, #94	; 0x5e
 800431c:	5a52      	ldrh	r2, [r2, r1]
 800431e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004320:	0001      	movs	r1, r0
 8004322:	187b      	adds	r3, r7, r1
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d044      	beq.n	80043b4 <UART_RxISR_16BIT_FIFOEN+0x32c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2268      	movs	r2, #104	; 0x68
 800432e:	5a9b      	ldrh	r3, [r3, r2]
 8004330:	187a      	adds	r2, r7, r1
 8004332:	8812      	ldrh	r2, [r2, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d23d      	bcs.n	80043b4 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004338:	f3ef 8310 	mrs	r3, PRIMASK
 800433c:	60fb      	str	r3, [r7, #12]
  return(result);
 800433e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004340:	65bb      	str	r3, [r7, #88]	; 0x58
 8004342:	2301      	movs	r3, #1
 8004344:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f383 8810 	msr	PRIMASK, r3
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	491b      	ldr	r1, [pc, #108]	; (80043c8 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800435a:	400a      	ands	r2, r1
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f383 8810 	msr	PRIMASK, r3
}
 8004368:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a17      	ldr	r2, [pc, #92]	; (80043cc <UART_RxISR_16BIT_FIFOEN+0x344>)
 800436e:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004370:	f3ef 8310 	mrs	r3, PRIMASK
 8004374:	61bb      	str	r3, [r7, #24]
  return(result);
 8004376:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004378:	657b      	str	r3, [r7, #84]	; 0x54
 800437a:	2301      	movs	r3, #1
 800437c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f383 8810 	msr	PRIMASK, r3
}
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2120      	movs	r1, #32
 8004392:	430a      	orrs	r2, r1
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004398:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	f383 8810 	msr	PRIMASK, r3
}
 80043a0:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043a2:	e007      	b.n	80043b4 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2108      	movs	r1, #8
 80043b0:	430a      	orrs	r2, r1
 80043b2:	619a      	str	r2, [r3, #24]
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b022      	add	sp, #136	; 0x88
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	fffffeff 	.word	0xfffffeff
 80043c0:	effffffe 	.word	0xeffffffe
 80043c4:	fbffffff 	.word	0xfbffffff
 80043c8:	efffffff 	.word	0xefffffff
 80043cc:	08003ba1 	.word	0x08003ba1

080043d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043d8:	46c0      	nop			; (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	b002      	add	sp, #8
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80043f8:	46c0      	nop			; (mov r8, r8)
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b002      	add	sp, #8
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2284      	movs	r2, #132	; 0x84
 800440c:	5c9b      	ldrb	r3, [r3, r2]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_UARTEx_DisableFifoMode+0x16>
 8004412:	2302      	movs	r3, #2
 8004414:	e027      	b.n	8004466 <HAL_UARTEx_DisableFifoMode+0x66>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2284      	movs	r2, #132	; 0x84
 800441a:	2101      	movs	r1, #1
 800441c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2288      	movs	r2, #136	; 0x88
 8004422:	2124      	movs	r1, #36	; 0x24
 8004424:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2101      	movs	r1, #1
 800443a:	438a      	bics	r2, r1
 800443c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004442:	4013      	ands	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2288      	movs	r2, #136	; 0x88
 8004458:	2120      	movs	r1, #32
 800445a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2284      	movs	r2, #132	; 0x84
 8004460:	2100      	movs	r1, #0
 8004462:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	0018      	movs	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	b004      	add	sp, #16
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	dfffffff 	.word	0xdfffffff

08004474 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2284      	movs	r2, #132	; 0x84
 8004482:	5c9b      	ldrb	r3, [r3, r2]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004488:	2302      	movs	r3, #2
 800448a:	e02e      	b.n	80044ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2284      	movs	r2, #132	; 0x84
 8004490:	2101      	movs	r1, #1
 8004492:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2288      	movs	r2, #136	; 0x88
 8004498:	2124      	movs	r1, #36	; 0x24
 800449a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2101      	movs	r1, #1
 80044b0:	438a      	bics	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	08d9      	lsrs	r1, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 f854 	bl	8004578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2288      	movs	r2, #136	; 0x88
 80044dc:	2120      	movs	r1, #32
 80044de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2284      	movs	r2, #132	; 0x84
 80044e4:	2100      	movs	r1, #0
 80044e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b004      	add	sp, #16
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2284      	movs	r2, #132	; 0x84
 8004502:	5c9b      	ldrb	r3, [r3, r2]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004508:	2302      	movs	r3, #2
 800450a:	e02f      	b.n	800456c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2284      	movs	r2, #132	; 0x84
 8004510:	2101      	movs	r1, #1
 8004512:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2288      	movs	r2, #136	; 0x88
 8004518:	2124      	movs	r1, #36	; 0x24
 800451a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2101      	movs	r1, #1
 8004530:	438a      	bics	r2, r1
 8004532:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800453c:	4013      	ands	r3, r2
 800453e:	0019      	movs	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	0018      	movs	r0, r3
 800454e:	f000 f813 	bl	8004578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2288      	movs	r2, #136	; 0x88
 800455e:	2120      	movs	r1, #32
 8004560:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2284      	movs	r2, #132	; 0x84
 8004566:	2100      	movs	r1, #0
 8004568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	0018      	movs	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	b004      	add	sp, #16
 8004572:	bd80      	pop	{r7, pc}
 8004574:	f1ffffff 	.word	0xf1ffffff

08004578 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004584:	2b00      	cmp	r3, #0
 8004586:	d108      	bne.n	800459a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	226a      	movs	r2, #106	; 0x6a
 800458c:	2101      	movs	r1, #1
 800458e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2268      	movs	r2, #104	; 0x68
 8004594:	2101      	movs	r1, #1
 8004596:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004598:	e043      	b.n	8004622 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800459a:	260f      	movs	r6, #15
 800459c:	19bb      	adds	r3, r7, r6
 800459e:	2208      	movs	r2, #8
 80045a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045a2:	200e      	movs	r0, #14
 80045a4:	183b      	adds	r3, r7, r0
 80045a6:	2208      	movs	r2, #8
 80045a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	0e5b      	lsrs	r3, r3, #25
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	240d      	movs	r4, #13
 80045b6:	193b      	adds	r3, r7, r4
 80045b8:	2107      	movs	r1, #7
 80045ba:	400a      	ands	r2, r1
 80045bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	0f5b      	lsrs	r3, r3, #29
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	250c      	movs	r5, #12
 80045ca:	197b      	adds	r3, r7, r5
 80045cc:	2107      	movs	r1, #7
 80045ce:	400a      	ands	r2, r1
 80045d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045d2:	183b      	adds	r3, r7, r0
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	197a      	adds	r2, r7, r5
 80045d8:	7812      	ldrb	r2, [r2, #0]
 80045da:	4914      	ldr	r1, [pc, #80]	; (800462c <UARTEx_SetNbDataToProcess+0xb4>)
 80045dc:	5c8a      	ldrb	r2, [r1, r2]
 80045de:	435a      	muls	r2, r3
 80045e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80045e2:	197b      	adds	r3, r7, r5
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	4a12      	ldr	r2, [pc, #72]	; (8004630 <UARTEx_SetNbDataToProcess+0xb8>)
 80045e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045ea:	0019      	movs	r1, r3
 80045ec:	f7fb fe12 	bl	8000214 <__divsi3>
 80045f0:	0003      	movs	r3, r0
 80045f2:	b299      	uxth	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	226a      	movs	r2, #106	; 0x6a
 80045f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045fa:	19bb      	adds	r3, r7, r6
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	193a      	adds	r2, r7, r4
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	490a      	ldr	r1, [pc, #40]	; (800462c <UARTEx_SetNbDataToProcess+0xb4>)
 8004604:	5c8a      	ldrb	r2, [r1, r2]
 8004606:	435a      	muls	r2, r3
 8004608:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800460a:	193b      	adds	r3, r7, r4
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	4a08      	ldr	r2, [pc, #32]	; (8004630 <UARTEx_SetNbDataToProcess+0xb8>)
 8004610:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004612:	0019      	movs	r1, r3
 8004614:	f7fb fdfe 	bl	8000214 <__divsi3>
 8004618:	0003      	movs	r3, r0
 800461a:	b299      	uxth	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2268      	movs	r2, #104	; 0x68
 8004620:	5299      	strh	r1, [r3, r2]
}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b005      	add	sp, #20
 8004628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	0800471c 	.word	0x0800471c
 8004630:	08004724 	.word	0x08004724

08004634 <memset>:
 8004634:	0003      	movs	r3, r0
 8004636:	1882      	adds	r2, r0, r2
 8004638:	4293      	cmp	r3, r2
 800463a:	d100      	bne.n	800463e <memset+0xa>
 800463c:	4770      	bx	lr
 800463e:	7019      	strb	r1, [r3, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	e7f9      	b.n	8004638 <memset+0x4>

08004644 <__libc_init_array>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	2600      	movs	r6, #0
 8004648:	4c0c      	ldr	r4, [pc, #48]	; (800467c <__libc_init_array+0x38>)
 800464a:	4d0d      	ldr	r5, [pc, #52]	; (8004680 <__libc_init_array+0x3c>)
 800464c:	1b64      	subs	r4, r4, r5
 800464e:	10a4      	asrs	r4, r4, #2
 8004650:	42a6      	cmp	r6, r4
 8004652:	d109      	bne.n	8004668 <__libc_init_array+0x24>
 8004654:	2600      	movs	r6, #0
 8004656:	f000 f819 	bl	800468c <_init>
 800465a:	4c0a      	ldr	r4, [pc, #40]	; (8004684 <__libc_init_array+0x40>)
 800465c:	4d0a      	ldr	r5, [pc, #40]	; (8004688 <__libc_init_array+0x44>)
 800465e:	1b64      	subs	r4, r4, r5
 8004660:	10a4      	asrs	r4, r4, #2
 8004662:	42a6      	cmp	r6, r4
 8004664:	d105      	bne.n	8004672 <__libc_init_array+0x2e>
 8004666:	bd70      	pop	{r4, r5, r6, pc}
 8004668:	00b3      	lsls	r3, r6, #2
 800466a:	58eb      	ldr	r3, [r5, r3]
 800466c:	4798      	blx	r3
 800466e:	3601      	adds	r6, #1
 8004670:	e7ee      	b.n	8004650 <__libc_init_array+0xc>
 8004672:	00b3      	lsls	r3, r6, #2
 8004674:	58eb      	ldr	r3, [r5, r3]
 8004676:	4798      	blx	r3
 8004678:	3601      	adds	r6, #1
 800467a:	e7f2      	b.n	8004662 <__libc_init_array+0x1e>
 800467c:	0800472c 	.word	0x0800472c
 8004680:	0800472c 	.word	0x0800472c
 8004684:	08004730 	.word	0x08004730
 8004688:	0800472c 	.word	0x0800472c

0800468c <_init>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr

08004698 <_fini>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr
